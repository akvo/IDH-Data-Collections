factor_to_int <- function(x){
as.numeric(as.character(x))
}
# Find and replace outliers
outlier_detection <- function(x){
ifelse(
x > (mean(x, na.rm=TRUE) + sd(x, na.rm=TRUE)*3) |
x < (mean(x, na.rm=TRUE) - sd(x, na.rm=TRUE)*3),
9997,
x
)
}
options(scipen = 999)
# count values without NA
count_n <- function(x){sum(!is.na(x))}
##  ---- Import data ----
# Read data from the data folder
Data <- read_excel(data_filename)
Data_raw <- read_excel(data_filename)
Data_raw <- Data_raw %>%
select(-starts_with("pi_"), -name_of_farmer, -mobile_number_farmer)
# Read file with survey structure
survey_questions <- read_excel((survey_filename),sheet ="Full Survey", skip=2)
##  ---- Adjust survey to be used for analysis  ----
# SURVEY ADJUSTMENTS
survey_questions %<>%
# Fill excel merged cells from the section
mutate(Title = na.locf(Title, na.rm = FALSE)) %>%
# Select right columns
select("Title", "Variable name", "Text",
"Question type", "Options",
"Allow multiple") %>%
# Trim trailing spaces
mutate_if(is.character, str_trim) %>%
# Rename columns
rename("section" = "Title",
"variable" = "Variable name",
"question" = "Text",
"type" = "Question type",
"options" = "Options",
"multiple" = "Allow multiple") %>%
# All variables to lowercase
mutate_all(tolower) %>%
# Filter the empty variables
filter(!is.na(variable))
##  ---- Get basic information on your data ----
# Collect the different variables, numerical questions:
numerical_columns <- survey_questions %>%
filter(type == "number") %>%
filter(variable != "f_sorghum_price") %>%
select("variable") %>% pull()
## ---- Count initial number of participants
nr_participants_raw <- length(unique(Data_raw$Identifier))
##  ---- Make changes to datasets and codebook ----
# Changes to data set:
Data <- Data %>%
# Set the date to date format
mutate(`Submission Date` = as.Date(`Submission Date`, format = "%d-%m-%Y")) %>%
# Remove irrelevant columns
select(-c(`Display Name`,`Device identifier`,`Instance`,
`Submitter`,
`Form version`)) %>%
select(-contains("--option--")) %>%
# All column names to lowercase
rename_all(funs(tolower)) %>%
# Rename option variables
rename_all( funs(gsub("--other--", "_other2", ., perl=T))) %>%
# All variables to lowercase
mutate_all(tolower) %>%
# Remove to farmers that didn't participate
mutate(ic_informed_consent = na.locf(ic_informed_consent, na.rm = FALSE)) %>%
filter(ic_informed_consent == "accepted to participate")  %>%
# Numerical columns to numeric data type
mutate_at(vars(numerical_columns), funs(as.numeric)) %>%
#General case
mutate(f_maize_harvest_num = as.numeric(f_maize_harvest_num),
f_sorghum_harvest_num = as.numeric(f_sorghum_harvest_num)) %>%
# Remove all "other" option text ("other, please specify")
# mutate_each(funs(str_remove(., "other, please specify"))) %>%
mutate_if(is.character, funs(gsub("other, please specify", NA,.))) %>%
mutate_if(is.character, funs(gsub("\\|$","",.))) %>%
# Remove trailing spaces
mutate_if(is.character, str_trim) %>%
# Remove punctuation and special characters - EXCEPT for "|"
mutate_if(is.character, funs(gsub("[^\\|[:^punct:]]", "", ., perl=T)))
# FARM SIZE
Data <- Data %>%
unite("f_unit_land", c(f_unit_land),
na.rm = TRUE, remove = FALSE, sep=" ") %>%
##Check what the common meausurement unit for land is and adjust the following section accordingly.
##We need a farm size in acres for the total farm size, focus crop, other main crop 1 and othermaincrop 2.
mutate(f_size_acre = ifelse(f_unit_land == "hectares", f_size*2.471, f_size),
f_size_acre = ifelse(f_unit_land == "decimals" & f_size >= 5, f_size/100, f_size_acre),
f_size_acre = ifelse(f_size_acre <0.5, f_size_acre*10, f_size_acre)) %>%
mutate(f_maize_crop_size_acre = ifelse(f_unit_land == "hectares", f_maize_crop_size*2.471, f_maize_crop_size),
f_maize_crop_size_acre = ifelse(f_unit_land == "decimals" & f_maize_crop_size >= 5, f_maize_crop_size/100, f_maize_crop_size_acre),
f_maize_crop_size_acre = ifelse(f_maize_crop_size_acre <0.5, f_maize_crop_size_acre*10, f_maize_crop_size_acre),
f_sorghum_crop_size_acre = ifelse(f_unit_land == "hectares", f_sorghum_crop_size*2.471, f_sorghum_crop_size),
f_sorghum_crop_size_acre = ifelse(f_unit_land == "decimals" & f_sorghum_crop_size >= 5, f_sorghum_crop_size/100, f_sorghum_crop_size_acre)) %>%
mutate(f_size_othermaincrop_1_acre = ifelse(f_unit_land == "hectares",
f_size_othermaincrop_1*2.471,
f_size_othermaincrop_1),
f_size_othermaincrop_1_acre = ifelse(f_unit_land == "decimals" & f_size_othermaincrop_1 >= 5,
f_size_othermaincrop_1/100,
f_size_othermaincrop_1_acre)) %>%
mutate(f_size_othermaincrop_2_acre = ifelse(f_unit_land == "hectares",
f_size_othermaincrop_2*2.471,
f_size_othermaincrop_2),
f_size_othermaincrop_2_acre = ifelse(f_unit_land == "decimals" & f_size_othermaincrop_2 >= 5,
f_size_othermaincrop_2/100,
f_size_othermaincrop_2_acre)) %>%
mutate(f_size_othermaincrop_3_acre = ifelse(f_unit_land == "hectares",
f_size_othermaincrop_3*2.471,
f_size_othermaincrop_3),
f_size_othermaincrop_3_acre = ifelse(f_unit_land == "decimals" & f_size_othermaincrop_3 >= 5,
f_size_othermaincrop_3/100,
f_size_othermaincrop_3_acre)) %>%
# Extend farm size to determine productivity
mutate(f_maize_crop_size_acre = na.locf(f_maize_crop_size_acre, na.rm = FALSE),
f_sorghum_crop_size_acre = na.locf(f_sorghum_crop_size_acre, na.rm = FALSE)) %>%
# Age
mutate(cal_hh_farmer_age = ifelse(hh_farmer_birthyear > 9996, NA, 2022 - hh_farmer_birthyear),
cal_hh_head_age = ifelse(hh_head_birthyear > 9996, NA, 2022 - hh_head_birthyear))
#cal_hh_member_birthyear = 2022-hh_member_birthyear) #update to current year %>%
##Calculate median values
median_maize_price <- median(Data$f_maize_price, na.rm=TRUE)
median_sorghum_price <- median(Data$f_sorghum_price, na.rm=TRUE)
Data <- Data %>%
# Context specific adjustments
mutate(f_sorghum_quant_prod = ifelse(f_sorghum_quant_prod == 228000, 228, f_sorghum_quant_prod),
f_sorghum_quant_prod = ifelse(identifier == "xbmrvmbxds8a" & `repeat no`==1, 2, f_sorghum_quant_prod),
f_labour_farm_nrwomen = ifelse(f_labour_farm_nrwomen > 1000, NA, f_labour_farm_nrwomen),
#f_maize_price = ifelse(f_maize_price == 1998, NA, f_maize_price),
f_maize_price = ifelse(f_maize_price >=50000, f_maize_price/f_maize_quant_sold, f_maize_price),
f_maize_price = ifelse(f_maize_price >= 11 & f_maize_price <=100 |
f_maize_price >=1800 & f_maize_price<= 8000 ,median_maize_price, f_maize_price),
f_sorghum_price = as.numeric(f_sorghum_price),
f_sorghum_price = ifelse(f_sorghum_price > 2000, f_sorghum_price/f_sorghum_quant_sold, f_sorghum_price),
f_sorghum_price = ifelse(f_sorghum_price >= 60 & f_sorghum_price <=150 |
f_sorghum_price ==2000 , median_sorghum_price, f_sorghum_price)) %>%
# OUTLIERS:
mutate_at(vars(numerical_columns), funs(outlier_detection)) %>%
# All variables that are 9999/"i don't know" or 9998/"i prefer not to say" are set to NA
mutate_if(is.numeric, list(~na_if(., 9999))) %>%
mutate_if(is.numeric, list(~na_if(., 9998))) %>%
mutate_if(is.numeric, list(~na_if(., 9997))) %>%
mutate_if(is.character, list(~na_if(., "i don't know"))) %>%
mutate_if(is.character, list(~na_if(., "i prefer not to say"))) %>%
##3 observations for which odd production and sold quantities were reported and we were unable to find why
filter(identifier != "1h9m20hf5a1k",
identifier != "pafwx1rf51p5",
identifier != "2fkc4t3n0ker")
# Get original number of participants
nr_participants_ic <- length(unique(Data$identifier))
# OTHER
variables_other <- Data %>%
select(ends_with("_other"), ends_with("_other2")) %>%
names()
for(other in variables_other){
if(any(names(Data) %in% gsub("_other$|_other2$", "", other))){
# Fuzzy match? - many spelling mistakes in "other" questions
# Combine "other" variables with their parents
Data <- Data %>%
unite(!!gsub("_other$|_other2$", "", other),
c(gsub("_other$|_other2$", "", other), all_of(other)),
sep="|", remove=FALSE, na.rm=TRUE) %>%
select(-other)
}
}
# NUMBER OF SEASONS
number_of_seasons_maize <- max(Data$f_maize_harvest_num, na.rm=TRUE)
number_of_seasons_sorghum  <- max(Data$f_sorghum_harvest_num, na.rm=TRUE)
##  ---- ______ ----
##  ---- ACTUAL INCOME CALCULATIONS ----
#For more detailed description, see: https://docs.google.com/spreadsheets/d/1LvBxEfzq7jfLlw6Yv3VXi6hRps90SVG1qMEixSBxfZ4/edit#gid=208057956
##  ---- 1) Contextualize-> Prep: transform measurement units  ----
## 1a Maize ----
Data <- Data %>%
##Measurement unit for production
mutate(cal_maize_measurement_prod := ifelse(
grepl("[[:digit:]]", f_maize_measurement_prod),
extract_numeric(f_maize_measurement_prod),
ifelse(f_maize_measurement_prod %in% c("KG","kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_maize_measurement_prod = ifelse(f_maize_measurement_prod == "bags" |
f_maize_measurement_sold == "5bags" |
identifier == "7gptrhhte9re",
100,cal_maize_measurement_prod) ,
cal_maize_measurement_prod = ifelse(f_maize_measurement_prod == "basin", 15, cal_maize_measurement_prod)) %>%
##Measurement unit for sales
mutate(cal_maize_measurement_sold := ifelse(
grepl("[[:digit:]]", f_maize_measurement_sold),
extract_numeric(f_maize_measurement_sold),
ifelse(f_maize_measurement_sold %in% c("kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_maize_measurement_sold = ifelse(f_maize_measurement_prod == "bags"|
f_maize_measurement_sold == "5bags", 100,cal_maize_measurement_sold)) %>%
# measurement unit for lost
mutate(cal_maize_measurement_lost := ifelse(
grepl("[[:digit:]]", f_maize_measurement_lost),
extract_numeric(f_maize_measurement_lost),
ifelse(f_maize_measurement_lost %in% c("kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
#measurement unit for own consumption
##!! REMOVE IF NOT APPLICABLE
mutate(cal_maize_measurement_own_consumption := ifelse(
grepl("[[:digit:]]", f_maize_own_consumption_measurement),
extract_numeric(f_maize_own_consumption_measurement),
ifelse(f_maize_own_consumption_measurement %in% c("kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0)))%>%
mutate(cal_maize_measurement_own_consumption = ifelse(f_maize_measurement_sold== "5bags", 100,cal_maize_measurement_own_consumption))
## 1b Sorghum ----
Data <- Data %>%
##Measurement unit for production
mutate(cal_sorghum_measurement_prod := ifelse(
grepl("[[:digit:]]", f_sorghum_measurement_prod),
extract_numeric(f_sorghum_measurement_prod),
ifelse(f_sorghum_measurement_prod %in% c("KG","kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_sorghum_measurement_prod = ifelse(f_sorghum_measurement_prod == "bags", 100,cal_sorghum_measurement_prod),
cal_sorghum_measurement_prod = ifelse(f_sorghum_measurement_sold == "basin", 15, cal_sorghum_measurement_prod),
cal_sorghum_measurement_prod = ifelse(f_sorghum_measurement_sold == "cups", 0.5, cal_sorghum_measurement_prod)) %>%
##Measurement unit for sales
mutate(cal_sorghum_measurement_sold := ifelse(
grepl("[[:digit:]]", f_sorghum_measurement_sold),
extract_numeric(f_sorghum_measurement_sold),
ifelse(f_sorghum_measurement_sold %in% c("kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_sorghum_measurement_sold = ifelse(f_sorghum_measurement_sold == "bags", 100,cal_sorghum_measurement_sold),
cal_sorghum_measurement_sold = ifelse(f_sorghum_measurement_sold == "cups", 0.5, cal_sorghum_measurement_sold),
cal_sorghum_measurement_sold = ifelse(f_sorghum_measurement_sold == "sacs"|
f_sorghum_measurement_sold == "sack" , 95, cal_sorghum_measurement_sold),
cal_sorghum_measurement_sold = ifelse(f_sorghum_measurement_sold == "basin", 15, cal_sorghum_measurement_sold)) %>%
# measurement unit for lost
mutate(cal_sorghum_measurement_lost := ifelse(
grepl("[[:digit:]]", f_sorghum_measurement_lost),
extract_numeric(f_sorghum_measurement_lost),
ifelse(f_sorghum_measurement_lost %in% c("kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0)))
##  ---- 2) Prep: Calculate quantities  ----
##Calculate the quantities
##2a maize ----
Data <- Data %>%
mutate(cal_maize_quant_prod_kg = f_maize_quant_prod * cal_maize_measurement_prod,
cal_maize_quant_sold_kg = f_maize_quant_sold * cal_maize_measurement_sold,
cal_maize_quant_lost_kg = f_maize_quant_lost * cal_maize_measurement_lost,
cal_maize_quant_own_consumption_kg = f_maize_own_consumption * cal_maize_measurement_own_consumption) %>%
mutate(cal_maize_price= f_maize_price)
##2b sorghum ----
Data <- Data %>%
mutate(cal_sorghum_quant_prod_kg = f_sorghum_quant_prod * cal_sorghum_measurement_prod,
cal_sorghum_quant_sold_kg = f_sorghum_quant_sold * cal_sorghum_measurement_sold,
cal_sorghum_quant_lost_kg = f_sorghum_quant_lost * cal_sorghum_measurement_lost) %>%
mutate(cal_sorghum_price= as.numeric(f_sorghum_price))
##  ---- 3) Focus crop income  ----
##  ---- 3a Revenue ----
Data <- Data %>%
mutate(cal_maize_revenue = cal_maize_quant_sold_kg * cal_maize_price,
cal_sorghum_revenue = cal_sorghum_quant_sold_kg * cal_sorghum_price)
##3b Adjust for repeated question groups (if applicable) ----
## cal_focus_quant_prod_kg, cal_focus_quant_sold_kg,cal_focus_quant_lost_kg,cal_focus_revenue
##Adress values for those that have multiple seasons
## Maize
Data <- Data %>%
#Identify duplicates
group_by(identifier, f_maize_rev_timeperiod) %>% mutate(count_dup = n()) %>%
mutate(count_dup = ifelse(is.na(f_maize_rev_timeperiod), NA, count_dup)) %>% #check whether we don't make mistakes here. For some cases farmer enter twice wrongly, in other cases entering same values for 2 seasons is ok.
#Identify those with multiple seasons
group_by(identifier, f_maize_rev_timeperiod) %>% mutate(count_seasons = n()) %>%
mutate(count_seasons = ifelse(is.na(f_maize_rev_timeperiod) | count_seasons > 1, NA, count_seasons)) %>%
#Replace values with 0 for those that entered the data twice
mutate(`repeat no` = as.numeric(`repeat no`)) %>%
mutate(cal_maize_quant_prod_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_maize_quant_prod_kg)) %>%
mutate(cal_maize_quant_sold_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_maize_quant_sold_kg)) %>%
mutate(cal_maize_quant_own_consumption_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_maize_quant_own_consumption_kg )) %>%
mutate(cal_maize_quant_lost_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_maize_quant_lost_kg)) %>%
mutate(cal_maize_revenue = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_maize_revenue)) %>%
#Sum the quantities for those that entered data for multiple seasons
group_by(identifier, count_seasons) %>%
mutate(cal_maize_quant_prod_kg =  sum(cal_maize_quant_prod_kg)) %>%
mutate(cal_maize_quant_sold_kg =  sum(cal_maize_quant_sold_kg)) %>%
mutate(cal_maize_quant_own_consumption_kg =  sum(cal_maize_quant_own_consumption_kg)) %>%
mutate(cal_maize_quant_lost_kg =  sum(cal_maize_quant_lost_kg)) %>%
mutate(cal_maize_revenue = sum(cal_maize_revenue)) %>%
#Ensure we have 1 row of data for each farmer
mutate(cal_maize_quant_prod_kg = ifelse(`repeat no` >1 , NA, cal_maize_quant_prod_kg)) %>%
mutate(cal_maize_quant_sold_kg = ifelse(`repeat no` >1  , NA, cal_maize_quant_sold_kg)) %>%
mutate(cal_maize_quant_own_consumption_kg = ifelse(`repeat no` >1  , NA, cal_maize_quant_own_consumption_kg )) %>%
mutate(cal_maize_quant_lost_kg = ifelse(`repeat no` >1 , NA, cal_maize_quant_lost_kg)) %>%
mutate(cal_maize_revenue = ifelse (`repeat no`>1, NA, cal_maize_revenue)) %>%
ungroup() %>%
select(-count_dup, -count_seasons)
## Sorghum
Data <- Data %>%
#Identify duplicates
group_by(identifier, f_sorghum_rev_timeperiod) %>% mutate(count_dup = n()) %>%
mutate(count_dup = ifelse(is.na(f_sorghum_rev_timeperiod), NA, count_dup)) %>% #check whether we don't make mistakes here. For some cases farmer enter twice wrongly, in other cases entering same values for 2 seasons is ok.
#Identify those with multiple seasons
group_by(identifier, f_sorghum_rev_timeperiod) %>% mutate(count_seasons = n()) %>%
mutate(count_seasons = ifelse(is.na(f_sorghum_rev_timeperiod) | count_seasons > 1, NA, count_seasons)) %>%
#Replace values with 0 for those that entered the data twice
#mutate(`repeat no` = as.numeric(`repeat no`)) %>%
mutate(cal_sorghum_quant_prod_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_sorghum_quant_prod_kg)) %>%
mutate(cal_sorghum_quant_sold_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_sorghum_quant_sold_kg)) %>%
mutate(cal_sorghum_quant_lost_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_sorghum_quant_lost_kg)) %>%
mutate(cal_sorghum_revenue = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_sorghum_revenue)) %>%
#Sum the quantities for those that entered data for multiple seasons
group_by(identifier, count_seasons) %>%
mutate(cal_sorghum_quant_prod_kg =  sum(cal_sorghum_quant_prod_kg)) %>%
mutate(cal_sorghum_quant_sold_kg =  sum(cal_sorghum_quant_sold_kg)) %>%
mutate(cal_sorghum_quant_lost_kg =  sum(cal_sorghum_quant_lost_kg)) %>%
mutate(cal_sorghum_revenue = sum(cal_sorghum_revenue)) %>%
#Ensure we have 1 row of data for each farmer
mutate(cal_sorghum_quant_prod_kg = ifelse(`repeat no` >1 , NA, cal_sorghum_quant_prod_kg)) %>%
mutate(cal_sorghum_quant_sold_kg = ifelse(`repeat no` >1  , NA, cal_sorghum_quant_sold_kg)) %>%
mutate(cal_sorghum_quant_lost_kg = ifelse(`repeat no` >1 , NA, cal_sorghum_quant_lost_kg)) %>%
mutate(cal_sorghum_revenue = ifelse (`repeat no`>1, NA, cal_sorghum_revenue)) %>%
ungroup() %>%
select(-count_dup, -count_seasons) %>%
#Put revenue at 0 for those that do not have revenue or for non applicable rows
mutate(cal_maize_revenue= ifelse(is.na(cal_maize_revenue), 0, cal_maize_revenue),
cal_sorghum_revenue= ifelse(is.na(cal_sorghum_revenue), 0, cal_sorghum_revenue))
##  3c Productivity  ----
Data <- Data %>%
mutate(cal_maize_productivity_acre = cal_maize_quant_prod_kg/f_maize_crop_size_acre,
cal_sorghum_productivity_acre = cal_sorghum_quant_prod_kg/f_sorghum_crop_size_acre)
##  4) Labour costs ----
## 4a labour costs ----
labour_types <- Data %>%
cSplit("f_crop_labour_types", "|") %>%
select(starts_with("f_crop_labour_types")) %>%
gather(key, value) %>% filter(!is.na(value)) %>%
select(value) %>% unique() %>% pull()
survey_labour_types <- substr(gsub("\\s|-", "", labour_types), 1, 5)
labour_options <- c("landprep", "fertilizerapp", "agrochemicalapp", "harvesting", "postharvest", "cropmaint",
"otheractivity", "compostprep", "nurserymaint")
Data <- Data %>%
mutate(f_labour_cropmaint_paymentperactivity = 0,
f_labour_nurserymaint_paymentperactivity = 0,
f_labour_compostprep_paymentperday = 0)
for(j in survey_labour_types){
if(any(startsWith(labour_options, j))){
var_name <- paste0("_labour_", labour_options[startsWith(labour_options, j)])
Data <- Data %>%
mutate_at(vars(contains("_othertype")), as.numeric) %>%
mutate_at(vars(contains("_othercosts")), as.numeric) %>%
#Calculate total number of hours for those that reported per hour
mutate("cal{var_name}_nrhours" := Data %>%
select(!!sym(paste0("f", var_name, "_nrhours")),
!!sym(paste0("f", var_name, "_nrdays"))) %>%
apply(.,1,prod)) %>%
mutate("f{var_name}_nrdays" := ifelse(!is.na(!!sym(paste0("f", var_name, "_nrhours"))), 0,
!!sym(paste0("f", var_name, "_nrdays"))))
}
}
for(j in survey_labour_types){
if(any(startsWith(labour_options, j))){
##Calculate wage costs for those that paid per hour
mutate("cal{var_name}_hour_costs" := Data %>%
select(!!sym(paste0("cal", var_name, "_nrhours")),
!!sym(paste0("f", var_name, "_paymentperhour")),
!!sym(paste0("f", var_name, "_nrhiredpeople"))) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per day
mutate("cal{var_name}_day_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_nrdays")),
!!sym(paste0("f", var_name, "_paymentperday")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per months
mutate("cal{var_name}_month_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_nrmonths")),
!!sym(paste0("f", var_name, "_paymentpermonth")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per activity
mutate("cal{var_name}_activity_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_paymentperactivity")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
unite(!!paste0("cal", var_name, "_part_1_total_cost"),
!!sym(paste0("cal", var_name, "_day_costs")):!!sym(paste0("cal", var_name, "_activity_costs")),
sep="|", remove=FALSE, na.rm=FALSE) %>%
mutate("cal{var_name}_part_1_total_cost" := extract_numeric( !!sym(paste0("cal", var_name, "_part_1_total_cost")))) %>%
#Calculate total cost for those that  reported wage using "other method"
mutate("f{var_name}_rememberwage_othercosts" := as.numeric(
!!sym(paste0("f", var_name, "_rememberwage_othercosts")))) %>%
mutate("cal{var_name}_part_2_total_cost" := Data %>%
select(!!sym(paste0("f", var_name, "_rememberwage_othercosts")),
!!sym(paste0("f", var_name, "_nrhiredpeople"))) %>%
apply(., 1, prod))
}
}
for(j in survey_labour_types){
if(any(startsWith(labour_options, j))){
var_name <- paste0("_labour_", labour_options[startsWith(labour_options, j)])
Data <- Data %>%
##Calculate wage costs for those that paid per hour
mutate("cal{var_name}_hour_costs" := Data %>%
select(!!sym(paste0("cal", var_name, "_nrhours")),
!!sym(paste0("f", var_name, "_paymentperhour")),
!!sym(paste0("f", var_name, "_nrhiredpeople"))) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per day
mutate("cal{var_name}_day_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_nrdays")),
!!sym(paste0("f", var_name, "_paymentperday")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per months
mutate("cal{var_name}_month_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_nrmonths")),
!!sym(paste0("f", var_name, "_paymentpermonth")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per activity
mutate("cal{var_name}_activity_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_paymentperactivity")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
unite(!!paste0("cal", var_name, "_part_1_total_cost"),
!!sym(paste0("cal", var_name, "_day_costs")):!!sym(paste0("cal", var_name, "_activity_costs")),
sep="|", remove=FALSE, na.rm=FALSE) %>%
mutate("cal{var_name}_part_1_total_cost" := extract_numeric( !!sym(paste0("cal", var_name, "_part_1_total_cost")))) %>%
#Calculate total cost for those that  reported wage using "other method"
mutate("f{var_name}_rememberwage_othercosts" := as.numeric(
!!sym(paste0("f", var_name, "_rememberwage_othercosts")))) %>%
mutate("cal{var_name}_part_2_total_cost" := Data %>%
select(!!sym(paste0("f", var_name, "_rememberwage_othercosts")),
!!sym(paste0("f", var_name, "_nrhiredpeople"))) %>%
apply(., 1, prod))
}
}
Data <- Data %>%
select(-contains("alltimeframes"),
-ends_with("hour_costs"),
-ends_with("day_costs"),
-ends_with("month_costs"),
-ends_with("activity_costs"),
-ends_with("nrhours"),
-f_labour_cropmaint_paymentperactivity,
-f_labour_nurserymaint_paymentperactivity,
-f_labour_compostprep_paymentperday) %>%
mutate_at(vars(starts_with("cal_labour") & ends_with("_total_cost")), as.numeric)
# Combine costs of all types of labour
Data <- Data %>%
mutate(cal_labour_cost = Data %>%
select(starts_with("cal_labour") & ends_with("_total_cost")) %>%
rowSums(na.rm=TRUE))
Data <- Data %>%
select(-contains("part_1_total_cost"),-contains("part_2_total_cost"))
## 4b adjust for repeated questions groups (IF APPLICABLE) ----
##Adress values for those that have multiple seasons
Data <- Data %>%
#Identify duplicates
group_by(identifier, f_crop_labour_timeperiod) %>% mutate(count_dup = n()) %>% #check whether we don't make mistakes here. For some cases farmer enter twice wrongly, in other cases entering same values for 2 seasons is ok.
mutate(count_dup = ifelse(is.na(f_crop_labour_timeperiod), NA, count_dup)) %>%
#Identify those with multiple seasons
group_by(identifier, f_crop_labour_timeperiod) %>% mutate(count_seasons = n()) %>%
mutate(count_seasons = ifelse(is.na(f_crop_labour_timeperiod) | count_seasons > 1, NA, count_seasons)) %>%
#Replace values with 0 for those that entered the data twice
mutate(`repeat no` = as.numeric(`repeat no`)) %>%
mutate(cal_labour_cost = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_labour_cost)) %>%
#Sum the values for those that entered data for multiple seasons
group_by(identifier, count_seasons) %>%
mutate(cal_labour_cost =  sum(cal_labour_cost)) %>%
#Ensure we have 1 row of data for each farmer
mutate(cal_labour_cost = ifelse(`repeat no` >1 , NA, cal_labour_cost)) %>%
ungroup() %>%
select(-count_dup, -count_seasons)
for(j in survey_labour_types){
if(any(startsWith(labour_options, j))){
var_name <- paste0("_labour_", labour_options[startsWith(labour_options, j)])
Data <- Data %>%
mutate_at(vars(contains("_othertype")), as.numeric) %>%
mutate_at(vars(contains("_othercosts")), as.numeric) %>%
#Calculate total number of hours for those that reported per hour
mutate("cal{var_name}_nrhours" := Data %>%
select(!!sym(paste0("f", var_name, "_nrhours")),
!!sym(paste0("f", var_name, "_nrdays"))) %>%
apply(.,1,prod)) %>%
mutate("f{var_name}_nrdays" := ifelse(!is.na(!!sym(paste0("f", var_name, "_nrhours"))), 0,
!!sym(paste0("f", var_name, "_nrdays"))))    %>%
##Calculate wage costs for those that paid per hour
mutate("cal{var_name}_hour_costs" := Data %>%
select(!!sym(paste0("cal", var_name, "_nrhours")),
!!sym(paste0("f", var_name, "_paymentperhour")),
!!sym(paste0("f", var_name, "_nrhiredpeople"))) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per day
mutate("cal{var_name}_day_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_nrdays")),
!!sym(paste0("f", var_name, "_paymentperday")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per months
mutate("cal{var_name}_month_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_nrmonths")),
!!sym(paste0("f", var_name, "_paymentpermonth")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
##Calculate wage costs for those that paid per activity
mutate("cal{var_name}_activity_costs" := Data %>%
select(!!sym(paste0("f", var_name, "_paymentperactivity")),
!!sym(paste0("f", var_name, "_nrhiredpeople")),) %>%
apply(.,1,prod)) %>%
unite(!!paste0("cal", var_name, "_part_1_total_cost"),
!!sym(paste0("cal", var_name, "_day_costs")):!!sym(paste0("cal", var_name, "_activity_costs")),
sep="|", remove=FALSE, na.rm=FALSE) %>%
mutate("cal{var_name}_part_1_total_cost" := extract_numeric( !!sym(paste0("cal", var_name, "_part_1_total_cost")))) %>%
#Calculate total cost for those that  reported wage using "other method"
mutate("f{var_name}_rememberwage_othercosts" := as.numeric(
!!sym(paste0("f", var_name, "_rememberwage_othercosts")))) %>%
mutate("cal{var_name}_part_2_total_cost" := Data %>%
select(!!sym(paste0("f", var_name, "_rememberwage_othercosts")),
!!sym(paste0("f", var_name, "_nrhiredpeople"))) %>%
apply(., 1, prod))
}
}
