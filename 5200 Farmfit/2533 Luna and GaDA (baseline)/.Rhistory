maize_revenue_raw <- read_xlsx(data_filename, sheet = "maize_repeat_revenue")
soybean_revenue_raw <- read_xlsx(data_filename, sheet = "soybean_repeat_revenue")
sunflower_revenue_raw <- read_xlsx(data_filename, sheet = "sunflower_repeat_revenue")
onion_revenue_raw <- read_xlsx(data_filename, sheet = "onion_repeat_revenue")
input_use_costs_raw <- read_xlsx(data_filename, sheet = "input_use_costs_repeat")
labour_use_raw <- read_xlsx(data_filename, sheet = "labour_use_repeat")
company_loop_maize_raw <- read_xlsx(data_filename, sheet = "maize_company_loop")
company_loop_soybean_raw <- read_xlsx(data_filename, sheet = "company_loop_soybean")
company_loop_sunflower_raw <- read_xlsx(data_filename, sheet = "company_loop_sunflower")
company_loop_onion_raw <- read_xlsx(data_filename, sheet = "company_loop_onion")
company_loop_org_raw <- read_xlsx(data_filename, sheet = "company_loop_organization")
# Read file with survey structure
survey_questions <- read_excel((survey_filename),sheet ="survey")
questions_choices <- read_excel ((survey_filename), sheet ="choices")
# SURVEY QUESTION SHEET
survey_questions %<>%
# Select relevant columns: type, name, label in English, and relevant
select(type, name, `label::English`, `label::Amharic`, disabled, relevant) %>%
# Trim any trailing spaces from character columns
mutate(across(where(is.character), str_trim)) %>%
# Rename "label: English" to a simpler "label"
rename(label = `label::English`) %>%
# Convert all data to lowercase for consistency
mutate(across(everything(), tolower)) %>%
# Filter out rows where the 'type' column is missing (empty rows)
filter(!is.na(type)) %>%
# Filter out rows where the 'label' column is missing (empty rows)
filter(!is.na(label)) %>%
# Filter out rows where the type is 'note', 'begin_group', or 'begin_repeat'
filter(!type %in% c("note", "begin_group", "begin group", "begin_repeat"))
#remove desabled questions
survey_questions %<>%
mutate(disabled= ifelse(is.na(disabled), "false", disabled))%>%
filter(disabled != "true")
# CHOICES QUESTION SHEET
questions_choices %<>%
# Select relevant columns: list_name, name, label in English, and label in Portuguese
select(list_name, name, `label::English`, `label::Amharic`) %>%
# Trim any trailing spaces from character columns
mutate(across(where(is.character), str_trim)) %>%
# Rename "label: English" to "label" and "list_name" to "choices_name"
rename(label = `label::English`, choices_name = list_name) %>%
# Convert all data to lowercase for consistency
mutate(across(everything(), tolower)) %>%
# Filter out rows where the 'choices_name' column is missing (empty rows)
filter(!is.na(choices_name))
# Collect the different variables, numerical questions:
numerical_columns <- survey_questions %>%
filter(type %in% c("integer", "decimal")) %>%
select("name") %>% pull()
Data$uui
## ---- Count initial number of participants
nr_participants_raw <- length(unique(Data$`_uuid`))
Data <- Data %>%
# Set the date to date format
mutate(`_submission_time` = as.Date(`_submission_time`, format = "%d-%m-%Y")) %>%
# Remove irrelevant columns
select(-c(devicephonenum, deviceid, uuid,
`__version__`, `_validation_status`, `_notes`, `_status`, `_submitted_by`, `_tags`,
)) %>%
select(-contains("/")) %>%
# All column names to lowercase
rename_all(tolower) %>%
# Remove farmers who didn’t participate
mutate(surv_consent = na.locf(surv_consent, na.rm = FALSE)) %>%
filter(surv_consent != "accepted to participate") %>%
# Remove completely empty columns
select(where(~ !all(is.na(.))))
#Collect the different variables, numerical questions:
Data <- Data %>%
rename(uuid = `_uuid`)
#subset
data_other <-variables_other <- Data %>%
select(ends_with("_other"), -f_focus_costs_other)
# # Create a new variable to categorize responses into broader categories
# Data <- Data %>%
#   mutate(
#     sust_challenges_other_category = case_when(
#       # No Challenges
#       grepl("Nenhum|Não teve desafios|Não tem desafios|Sem desafios|Nada|não encontrou dificuldades", f_sust_challenges_other, ignore.case = TRUE) ~ "No Challenges",
#
#       # Operational/Logistical Challenges
#       grepl("mão de obra|tempo|assistência técnica|operacional|mão de obra|equilíbrio|manutenção", f_sust_challenges_other, ignore.case = TRUE) ~ "Operational/Logistical Challenges",
#
#       # Environmental/Climate Challenges
#       grepl("clima|temperaturas|preconceito|braquiária", f_sust_challenges_other, ignore.case = TRUE) ~ "Environmental/Climate Challenges",
#
#       # Financial/Economic Challenges
#       grepl("compras de maquinários|achar os insumos|preocupações econômicas", f_sust_challenges_other, ignore.case = TRUE) ~ "Financial/Economic Challenges",
#
#       # Regulatory and Policy Challenges
#       grepl("não concorda com regulamentação|governo|políticas", f_sust_challenges_other, ignore.case = TRUE) ~ "Regulatory and Policy Challenges",
#
#       # Other/Unspecified
#       TRUE ~ "Other/Unspecified"
#     )
#   )%>%
#   mutate(sust_challenges_other_category = ifelse(is.na(f_sust_challenges_other) | f_sust_challenges_other == ".", NA_character_, sust_challenges_other_category))
variables_other <- Data %>%
select(ends_with("_other"), ends_with("_other2"), -f_focus_costs_other) %>%
names()
for(other in variables_other){
if(any(names(Data) %in% gsub("_other$|_other2$", "", other))){
# Fuzzy match? - many spelling mistakes in "other" questions
# Combine "other" variables with their parents
Data <- Data %>%
unite(!!gsub("_other$|_other2$", "", other),
c(gsub("_other$|_other2$", "", other), all_of(other)),
sep="|", remove=FALSE, na.rm=TRUE) %>%
select(-other)
}
}
# First check what are the unit measurements reported in this case.
table(Data$f_unit_land)
#table(Data$f_unit_land_other2)
# THIS IS EXAMPLE CODE! ADAPT THE CODE TO THE NECESSARY ADJUSTMENTS IN THE CASE, OR DELETE CODE IF NO CLEANING IS REQUIRED
# Data <- Data %>%
#   mutate(f_focus_crop_size = ifelse(f_size < f_focus_crop_size, NA, f_focus_crop_size))
#
#Mutate the different units to acres. We need a farm size in acres for the total farm size, and the size dedicated to focus crop.
Data <- Data %>%
#Convert land size to acres if in hectares
mutate(f_size_acre = ifelse(f_unit_land == "hectares", f_size * 2.471, f_size),
f_maize_size_acre = ifelse(f_unit_land == "hectares", f_maize_crop_size * 2.471, f_maize_crop_size),
f_onion_size_acre = ifelse(f_unit_land == "hectares", f_onion_crop_size * 2.471, f_onion_crop_size),
f_sunflower_size_acre = ifelse(f_unit_land == "hectares", f_sunflower_crop_size * 2.471, f_sunflower_crop_size),
f_soybean_size_acre = ifelse(f_unit_land == "hectares", f_soybean_crop_size * 2.471, f_soybean_crop_size)) %>%
# Fill missing values in focus crop size
mutate(f_maize_size_acre = na.locf(f_maize_size_acre, na.rm = FALSE),
f_onion_size_acre = na.locf(f_onion_size_acre, na.rm = FALSE),
f_sunflower_size_acre = na.locf(f_sunflower_size_acre, na.rm = FALSE),
f_soybean_size_acre = na.locf(f_soybean_size_acre, na.rm = FALSE)) %>%
#Mutate the different units to hectares. We need a farm size in hectares for the total farm size, and the size dedicated to focus crop.
mutate(f_size_hectare = ifelse(f_unit_land == "hectares", f_size, f_size_acre / 2.471),
f_maize_size_hectare = ifelse(f_unit_land == "hectares", f_maize_crop_size, f_maize_crop_size / 2.471),
f_onion_size_hectare = ifelse(f_unit_land == "hectares", f_onion_crop_size, f_onion_crop_size / 2.471),
f_sunflower_size_hectare = ifelse(f_unit_land == "hectares", f_sunflower_crop_size, f_sunflower_crop_size / 2.471),
f_soybean_size_hectare = ifelse(f_unit_land == "hectares", f_soybean_crop_size, f_soybean_crop_size / 2.471))
Data <- Data %>%
# Adjust adults figure in household
#  mutate(hh_adults_num = hh_size - hh_children_num) #adults already exist, let's calculate for children
mutate(hh_children_num = hh_size - hh_adults_num)
#convert birth year to age
# Data <- Data %>%
#   mutate(cal_hh_farmer_age = 2024 - hh_farmer_birthyear,
#            cal_hh_head_age = 2024-hh_head_birthyear)
#if hh_farmer_birthyear already in age, rename using below code
Data <- Data %>%
# rename birth year to age
rename(cal_hh_head_age= "hh_head_birthyear")
# Data <- Data %>%
#   mutate(f_focus_price = ifelse(uuid=="47a5f878-8d38-4ca1-929d-2710f9f7c6d0", 1175,
#                                 ifelse(uuid=="6db21e1c-9a4b-4252-9a23-dc7655f0c602", 120,f_focus_price)))
#
#
# #calculate median to be used when needed
# median_price<- Data %>%
#    summarize(median_price = median(f_focus_price, na.rm = TRUE))
# #wrong price but enumerator don't remember
# Data <- Data %>%
#   mutate(f_focus_price= ifelse(uuid=="21d51199-d16d-4b4a-a1c7-073740e26e00", median_price$median_price, f_focus_price))
#   Data <- Data %>%
#     mutate(f_focus_quant_prod = ifelse(uuid =="df4b4aa7-dba4-44e4-9c46-7daae3db6801", 2500,
#                                        ifelse(uuid =="b3f1b249-cd7f-4601-9c5e-139bb77c0d5a", 224,
#                                        f_focus_quant_prod)),
#                       f_focus_quant_sold = ifelse(uuid == "5fdf2061-dbb1-4e95-a4a2-0dacf9aa58cf", 1368,
#                                        ifelse(uuid == "c628f514-2650-4e41-b6c5-0b59ca21a7ed", 40, f_focus_quant_sold)))
#
# # #quantity sold>prod
#   Data <- Data %>%
#      mutate(f_focus_quant_sold=ifelse(f_focus_quant_prod > 0 & f_focus_quant_sold > f_focus_quant_prod, f_focus_quant_prod, f_focus_quant_sold))
# THIS IS EXAMPLE CODE! ADAPT THE CODE TO THE NECESSARY ADJUSTMENTS IN THE CASE, OR DELETE CODE IF NO CLEANING IS REQUIRED
# Data <- Data %>%
#   mutate(
#     #prod
#     f_focus_measurement_prod = ifelse(f_focus_quant_prod != 0 & f_focus_measurement_prod == "", "kgs", f_focus_measurement_prod))
#     #sold
#     #   harmonise measurement unit
#       f_focus_measurement_sold = ifelse(f_focus_measurement_sold == "100 kilogram bags", "100 kgs bags", f_focus_measurement_sold)
excluded_columns <- c("f_size", "f_maize_crop_size", "f_onion_crop_size", "f_sunflower_crop_size", "f_soybean_crop_size", "f_maize_quant_prod", "f_onion_quant_prod", "f_sunflower_quant_prod", "f_soybean_quant_prod", "f_maize_quant_sold", "f_onion_quant_sold", "f_sunflower_quant_sold", "f_soybean_quant_sold", "f_maize_quant_lost", "f_sunflower_quant_lost", "f_soybean_quant_lost", "f_onion_quant_lost") # Replace with actual variable names
#
# # Identify numerical columns for outlier handling, excluding those ending with "_#"
# numerical_columns <- names(Data %>% select_if(is.numeric)) %>%
#   .[!grepl("_\\d+$", .)]  %>%  # Exclude columns ending with "_#"
#   .[!(. %in% excluded_columns)] %>%  # Exclude specific columns
#   .[sapply(Data[.], function(x) length(unique(x)) > 2)]  # Exclude binary columns
get_clean_numeric_columns <- function(data, excluded_columns = character()) {
names(data %>% select_if(is.numeric)) %>%
.[!grepl("_\\d+$", .)] %>%  # Exclut les colonnes qui se terminent par "_#"
.[!(. %in% excluded_columns[excluded_columns %in% names(data)])] %>%  # Exclut celles présentes dans la base
.[sapply(data[.], function(x) length(unique(x)) > 2)]  # Exclut les colonnes binaires
}
numerical_columns_data <- get_clean_numeric_columns(Data, excluded_columns)
numerical_columns_maize_rev <- get_clean_numeric_columns(maize_revenue, excluded_columns)
numerical_columns_onion_rev <- get_clean_numeric_columns(onion_revenue, excluded_columns)
numerical_columns_sunflower_rev <- get_clean_numeric_columns(sunflower_revenue, excluded_columns)
numerical_columns_soybean_rev <- get_clean_numeric_columns(soybean_revenue, excluded_columns)
numerical_columns_cloop_maize <- get_clean_numeric_columns(company_loop_maize, excluded_columns)
numerical_columns_cloop_onion <- get_clean_numeric_columns(company_loop_onion, excluded_columns)
numerical_columns_cloop_sunflower <- get_clean_numeric_columns(company_loop_sunflower, excluded_columns)
numerical_columns_cloop_soybean <- get_clean_numeric_columns(company_loop_soybean, excluded_columns)
numerical_columns_cloop_org <- get_clean_numeric_columns(company_loop_org, excluded_columns)
numerical_columns_labour <- get_clean_numeric_columns(labour_use, excluded_columns)
numerical_columns_input <- get_clean_numeric_columns(input_use_costs, excluded_columns)
# OUTLIERS:
#Identify numerical columns again because of change in names above
numerical_columns <- survey_questions %>%
filter(type %in% c("integer", "decimal")) %>%
select("name") %>% pull()
# Apply the outlier detection function to numerical columns
Data <- Data %>%
mutate_at(vars(numerical_columns_data), funs(outlier_detection))
maize_revenue <- maize_revenue %>%
mutate_at(vars(numerical_columns_maize_rev), funs(outlier_detection))
onion_revenue <- onion_revenue %>%
mutate_at(vars(numerical_columns_onion_rev), funs(outlier_detection))
sunflower_revenue <- sunflower_revenue %>%
mutate_at(vars(numerical_columns_sunflower_rev), funs(outlier_detection))
soybean_revenue <- soybean_revenue %>%
mutate_at(vars(numerical_columns_soybean_rev), funs(outlier_detection))
company_loop_maize <- company_loop_maize %>%
mutate_at(vars(numerical_columns_cloop_maize), funs(outlier_detection))
company_loop_onion <- company_loop_onion %>%
mutate_at(vars(numerical_columns_cloop_onion), funs(outlier_detection))
company_loop_org <- company_loop_org %>%
mutate_at(vars(numerical_columns_cloop_org), funs(outlier_detection))
company_loop_soybean <- company_loop_soybean %>%
mutate_at(vars(numerical_columns_cloop_soybean), funs(outlier_detection))
company_loop_sunflower <- company_loop_sunflower %>%
mutate_at(vars(numerical_columns_cloop_sunflower), funs(outlier_detection))
labour_use <- labour_use %>%
mutate_at(vars(numerical_columns_labour), funs(outlier_detection))
input_use_costs <- input_use_costs %>%
mutate_at(vars(numerical_columns_input), funs(outlier_detection))
# Data <- Data %>%
#   # Replace specific values (9999, 9998, 9997) with NA for numeric columns
#   mutate_if(is.numeric, list(~na_if(., 9999))) %>%
#   mutate_if(is.numeric, list(~na_if(., 9998))) %>%
#   mutate_if(is.numeric, list(~na_if(., 9997))) %>%
#
#   # Replace "I don't know" or "I prefer not to say" with NA for character columns
#   mutate_if(is.character, list(~na_if(., "i don't know"))) %>%
#   mutate_if(is.character, list(~na_if(., "i prefer not to say")))
clean_common_na_values <- function(data) {
data %>%
mutate_if(is.numeric, ~na_if(., 9999)) %>%
mutate_if(is.numeric, ~na_if(., 9998)) %>%
mutate_if(is.numeric, ~na_if(., 9997)) %>%
mutate_if(is.character, ~na_if(tolower(.), "i don't know")) %>%
mutate_if(is.character, ~na_if(tolower(.), "i prefer not to say"))
}
Data <- clean_common_na_values(Data)
maize_revenue <- clean_common_na_values(maize_revenue)
onion_revenue <- clean_common_na_values(onion_revenue)
sunflower_revenue <- clean_common_na_values(sunflower_revenue)
soybean_revenue <- clean_common_na_values(soybean_revenue)
company_loop_maize <- clean_common_na_values(company_loop_maize)
company_loop_onion <- clean_common_na_values(company_loop_onion)
labour_use <- clean_common_na_values(labour_use)
input_use_costs <- clean_common_na_values(input_use_costs)
company_loop_org <- clean_common_na_values(company_loop_org)
company_loop_soybean <- clean_common_na_values(company_loop_soybean)
company_loop_sunflower <- clean_common_na_values(company_loop_sunflower)
# Number of participants who gave informed consent
nr_participants_ic <- length(unique(Data$uuid))
# NUMBER OF SEASONS
number_of_seasons <- max(Data$f_harvest_num, na.rm=TRUE)
table(maize_revenue$f_maize_measurement_prod)
table(maize_revenue$f_maize_measurement_sold)
table(maize_revenue$f_maize_measurement_lost)
maize_revenue <- maize_revenue %>%
##Measurement unit for production of maize
mutate(cal_maize_measurement_prod := ifelse(grepl("[[:digit:]]", f_maize_measurement_prod),
extract_numeric(f_maize_measurement_prod),
ifelse(f_maize_measurement_prod %in%c("kg","kgs", "Kg"), 1,
ifelse(f_maize_measurement_prod %in%c("Quintal"), 100, 0))))
onion_revenue <- onion_revenue %>%
##Measurement unit for production of onion
mutate(cal_onion_measurement_prod := ifelse(grepl("[[:digit:]]", f_onion_measurement_prod),
extract_numeric(f_onion_measurement_prod),
ifelse(f_onion_measurement_prod %in%c("kg","kgs", "Kg"), 1,
ifelse(f_onion_measurement_prod %in%c("Quintal"), 100, 0))))
sunflower_revenue <- sunflower_revenue %>%
##Measurement unit for production of sunflower
mutate(cal_sunflower_measurement_prod := ifelse(grepl("[[:digit:]]", f_sunflower_measurement_prod),
extract_numeric(f_sunflower_measurement_prod),
ifelse(f_sunflower_measurement_prod %in%c("kg","kgs", "Kg"), 1,
ifelse(f_sunflower_measurement_prod %in%c("Quintal"), 100, 0))))
soybean_revenue <- soybean_revenue %>%
##Measurement unit for production of soybean
mutate(cal_soybean_measurement_prod := ifelse(grepl("[[:digit:]]", f_soybean_measurement_prod),
extract_numeric(f_soybean_measurement_prod),
ifelse(f_soybean_measurement_prod %in%c("kg","kgs", "Kg"), 1,
ifelse(f_soybean_measurement_prod %in%c("Quintal"), 100, 0))))
maize_revenue <- maize_revenue %>%
##Measurement unit for sales of maize
mutate(cal_maize_measurement_sold := ifelse(grepl("[[:digit:]]", f_maize_measurement_sold),
extract_numeric(f_maize_measurement_sold),
ifelse(f_maize_measurement_sold %in%c("kg","kgs", "Kg"), 1,
ifelse(f_maize_measurement_sold %in%c("Quintal"), 100, 0))))
onion_revenue <- onion_revenue %>%
##Measurement unit for sales of onion
mutate(cal_onion_measurement_sold := ifelse(grepl("[[:digit:]]", f_onion_measurement_sold),
extract_numeric(f_onion_measurement_sold),
ifelse(f_onion_measurement_sold %in%c("kg","kgs", "Kg"), 1,
ifelse(f_onion_measurement_sold %in%c("Quintal"), 100, 0))))
sunflower_revenue <- sunflower_revenue %>%
##Measurement unit for sales of sunflower
mutate(cal_sunflower_measurement_sold := ifelse(grepl("[[:digit:]]", f_sunflower_measurement_sold),
extract_numeric(f_sunflower_measurement_sold),
ifelse(f_sunflower_measurement_sold %in%c("kg","kgs", "Kg"), 1,
ifelse(f_sunflower_measurement_sold %in%c("Quintal"), 100, 0))))
soybean_revenue <- soybean_revenue %>%
##Measurement unit for sales of soybean
mutate(cal_soybean_measurement_sold := ifelse(grepl("[[:digit:]]", f_soybean_measurement_sold),
extract_numeric(f_soybean_measurement_sold),
ifelse(f_soybean_measurement_sold %in%c("kg","kgs", "Kg"), 1,
ifelse(f_soybean_measurement_sold %in%c("Quintal"), 100, 0))))
maize_revenue <- maize_revenue %>%
##Measurement unit for sales of maize
mutate(cal_maize_measurement_lost := ifelse(grepl("[[:digit:]]", f_maize_measurement_lost),
extract_numeric(f_maize_measurement_lost),
ifelse(f_maize_measurement_lost %in%c("kg","kgs", "Kg"), 1,
ifelse(f_maize_measurement_lost %in%c("Quintal"), 100, 0))))
onion_revenue <- onion_revenue %>%
##Measurement unit for sales of onion
mutate(cal_onion_measurement_lost := ifelse(grepl("[[:digit:]]", f_onion_measurement_lost),
extract_numeric(f_onion_measurement_lost),
ifelse(f_onion_measurement_lost %in%c("kg","kgs", "Kg"), 1,
ifelse(f_onion_measurement_lost %in%c("Quintal"), 100, 0))))
sunflower_revenue <- sunflower_revenue %>%
##Measurement unit for sales of sunflower
mutate(cal_sunflower_measurement_lost := ifelse(grepl("[[:digit:]]", f_sunflower_measurement_lost),
extract_numeric(f_sunflower_measurement_lost),
ifelse(f_sunflower_measurement_lost %in%c("kg","kgs", "Kg"), 1,
ifelse(f_sunflower_measurement_lost %in%c("Quintal"), 100, 0))))
soybean_revenue <- soybean_revenue %>%
##Measurement unit for sales of soybean
mutate(cal_soybean_measurement_lost := ifelse(grepl("[[:digit:]]", f_soybean_measurement_lost),
extract_numeric(f_soybean_measurement_lost),
ifelse(f_soybean_measurement_lost %in%c("kg","kgs", "Kg"), 1,
ifelse(f_soybean_measurement_lost %in%c("Quintal"), 100, 0))))
maize_revenue <- maize_revenue %>%
##Measurement unit for sales of maize
mutate(cal_maize_measurement_seeds := ifelse(grepl("[[:digit:]]", f_maize_measurement_seeds),
extract_numeric(f_maize_measurement_seeds),
ifelse(f_maize_measurement_seeds %in%c("kg","kgs", "Kg"), 1,
ifelse(f_maize_measurement_seeds %in%c("Quintal"), 100, 0))))
onion_revenue <- onion_revenue %>%
##Measurement unit for sales of onion
mutate(cal_onion_measurement_seeds := ifelse(grepl("[[:digit:]]", f_onion_measurement_seeds),
extract_numeric(f_onion_measurement_seeds),
ifelse(f_onion_measurement_seeds %in%c("kg","kgs", "Kg"), 1,
ifelse(f_onion_measurement_seeds %in%c("Quintal"), 100, 0))))
sunflower_revenue <- sunflower_revenue %>%
##Measurement unit for sales of sunflower
mutate(cal_sunflower_measurement_seeds := ifelse(grepl("[[:digit:]]", f_sunflower_measurement_seeds),
extract_numeric(f_sunflower_measurement_seeds),
ifelse(f_sunflower_measurement_seeds %in%c("kg","kgs", "Kg"), 1,
ifelse(f_sunflower_measurement_seeds %in%c("Quintal"), 100, 0))))
soybean_revenue <- soybean_revenue %>%
##Measurement unit for sales of soybean
mutate(cal_soybean_measurement_seeds := ifelse(grepl("[[:digit:]]", f_soybean_measurement_seeds),
extract_numeric(f_soybean_measurement_seeds),
ifelse(f_soybean_measurement_seeds %in%c("kg","kgs", "Kg"), 1,
ifelse(f_soybean_measurement_seeds %in%c("Quintal"), 100, 0))))
#####Maize
maize_revenue <- maize_revenue %>%
# Convert relevant columns to numeric
mutate(across(c(f_maize_quant_prod, cal_maize_measurement_prod, f_maize_quant_sold, cal_maize_measurement_sold, f_maize_quant_lost, cal_maize_measurement_lost, f_maize_price), as.numeric)) %>%
##Calculate the quantities focus crop
mutate(cal_maize_quant_prod_kg = f_maize_quant_prod * cal_maize_measurement_prod) %>%
mutate(cal_maize_quant_sold_kg = f_maize_quant_sold * cal_maize_measurement_sold) %>%
mutate(cal_maize_quant_lost_kg = f_maize_quant_lost * cal_maize_measurement_lost) %>%
mutate(cal_maize_quant_seeds_kg = f_maize_use_seeds_quant * cal_maize_measurement_seeds) %>%
mutate(cal_maize_quant_plant_kg = f_maize_plant_quant * cal_maize_measurement_seeds) %>%
mutate(cal_maize_quant_seeds_selling_kg = f_maize_use_seeds_selling_quant * cal_maize_measurement_seeds) %>%
mutate_at(vars(starts_with("cal_maize_quant")), ~replace_na(., 0))
# also calculate the unit price
maize_revenue <- maize_revenue %>%
mutate(cal_maize_price_kg = ifelse(cal_maize_measurement_prod != 0, f_maize_price/cal_maize_measurement_sold, f_maize_price),
cal_maize_price_kg = ifelse(is.na(cal_maize_quant_sold_kg) | cal_maize_quant_sold_kg == 0, NA, cal_maize_price_kg))%>%
mutate(cal_maize_price_kg = replace_na(cal_maize_price_kg, 0)) %>%
#
mutate(cal_maize_price_selling_seeds_kg = ifelse(cal_maize_measurement_prod != 0, f_maize_price_selling_seeds/cal_maize_measurement_seeds, f_maize_price_selling_seeds),
cal_maize_price_selling_seeds_kg = ifelse(is.na(cal_maize_quant_seeds_selling_kg) | cal_maize_quant_seeds_selling_kg == 0, NA, cal_maize_price_selling_seeds_kg))%>%
mutate(cal_maize_price_selling_seeds_kg = replace_na(cal_maize_price_selling_seeds_kg, 0))
#####Onion
onion_revenue <- onion_revenue %>%
# Convert relevant columns to numeric
mutate(across(c(f_onion_quant_prod, cal_onion_measurement_prod, f_onion_quant_sold, cal_onion_measurement_sold, f_onion_quant_lost, cal_onion_measurement_lost, f_onion_price), as.numeric)) %>%
##Calculate the quantities focus crop
mutate(cal_onion_quant_prod_kg = f_onion_quant_prod * cal_onion_measurement_prod) %>%
mutate(cal_onion_quant_sold_kg = f_onion_quant_sold * cal_onion_measurement_sold) %>%
mutate(cal_onion_quant_lost_kg = f_onion_quant_lost * cal_onion_measurement_lost) %>%
mutate(cal_onion_quant_seeds_kg = f_onion_use_seeds_quant * cal_onion_measurement_seeds) %>%
mutate(cal_onion_quant_plant_kg = f_onion_plant_quant * cal_onion_measurement_seeds) %>%
mutate(cal_onion_quant_seeds_selling_kg = f_onion_use_seeds_selling_quant * cal_onion_measurement_seeds) %>%
mutate_at(vars(starts_with("cal_onion_quant")), ~replace_na(., 0))
# also calculate the unit price
onion_revenue <- onion_revenue %>%
mutate(cal_onion_price_kg = ifelse(cal_onion_measurement_prod != 0, f_onion_price/cal_onion_measurement_sold, f_onion_price),
cal_onion_price_kg = ifelse(is.na(cal_onion_quant_sold_kg) | cal_onion_quant_sold_kg == 0, NA, cal_onion_price_kg))%>%
mutate(cal_onion_price_kg = replace_na(cal_onion_price_kg, 0)) %>%
#
mutate(cal_onion_price_selling_seeds_kg = ifelse(cal_onion_measurement_prod != 0, f_onion_price_selling_seeds/cal_onion_measurement_seeds, f_onion_price_selling_seeds),
cal_onion_price_selling_seeds_kg = ifelse(is.na(cal_onion_quant_seeds_selling_kg) | cal_onion_quant_seeds_selling_kg == 0, NA, cal_onion_price_selling_seeds_kg))%>%
mutate(cal_onion_price_selling_seeds_kg = replace_na(cal_onion_price_selling_seeds_kg, 0))
#####sunflower
sunflower_revenue <- sunflower_revenue %>%
# Convert relevant columns to numeric
mutate(across(c(f_sunflower_quant_prod, cal_sunflower_measurement_prod, f_sunflower_quant_sold, cal_sunflower_measurement_sold, f_sunflower_quant_lost, cal_sunflower_measurement_lost, f_sunflower_price), as.numeric)) %>%
##Calculate the quantities focus crop
mutate(cal_sunflower_quant_prod_kg = f_sunflower_quant_prod * cal_sunflower_measurement_prod) %>%
mutate(cal_sunflower_quant_sold_kg = f_sunflower_quant_sold * cal_sunflower_measurement_sold) %>%
mutate(cal_sunflower_quant_lost_kg = f_sunflower_quant_lost * cal_sunflower_measurement_lost) %>%
mutate(cal_sunflower_quant_seeds_kg = f_sunflower_use_seeds_quant * cal_sunflower_measurement_seeds) %>%
mutate(cal_sunflower_quant_plant_kg = f_sunflower_plant_quant * cal_sunflower_measurement_seeds) %>%
mutate(cal_sunflower_quant_seeds_selling_kg = f_sunflower_use_seeds_selling_quant * cal_sunflower_measurement_seeds) %>%
mutate_at(vars(starts_with("cal_sunflower_quant")), ~replace_na(., 0))
# also calculate the unit price
sunflower_revenue <- sunflower_revenue %>%
mutate(cal_sunflower_price_kg = ifelse(cal_sunflower_measurement_prod != 0, f_sunflower_price/cal_sunflower_measurement_sold, f_sunflower_price),
cal_sunflower_price_kg = ifelse(is.na(cal_sunflower_quant_sold_kg) | cal_sunflower_quant_sold_kg == 0, NA, cal_sunflower_price_kg))%>%
mutate(cal_sunflower_price_kg = replace_na(cal_sunflower_price_kg, 0)) %>%
#
mutate(cal_sunflower_price_selling_seeds_kg = ifelse(cal_sunflower_measurement_prod != 0, f_sunflower_price_selling_seeds/cal_sunflower_measurement_seeds, f_sunflower_price_selling_seeds),
cal_sunflower_price_selling_seeds_kg = ifelse(is.na(cal_sunflower_quant_seeds_selling_kg) | cal_sunflower_quant_seeds_selling_kg == 0, NA, cal_sunflower_price_selling_seeds_kg))%>%
mutate(cal_sunflower_price_selling_seeds_kg = replace_na(cal_sunflower_price_selling_seeds_kg, 0))
#####soybean
soybean_revenue <- soybean_revenue %>%
# Convert relevant columns to numeric
mutate(across(c(f_soybean_quant_prod, cal_soybean_measurement_prod, f_soybean_quant_sold, cal_soybean_measurement_sold, f_soybean_quant_lost, cal_soybean_measurement_lost, f_soybean_price), as.numeric)) %>%
##Calculate the quantities focus crop
mutate(cal_soybean_quant_prod_kg = f_soybean_quant_prod * cal_soybean_measurement_prod) %>%
mutate(cal_soybean_quant_sold_kg = f_soybean_quant_sold * cal_soybean_measurement_sold) %>%
mutate(cal_soybean_quant_lost_kg = f_soybean_quant_lost * cal_soybean_measurement_lost) %>%
mutate(cal_soybean_quant_seeds_kg = f_soybean_use_seeds_quant * cal_soybean_measurement_seeds) %>%
mutate(cal_soybean_quant_plant_kg = f_soybean_plant_quant * cal_soybean_measurement_seeds) %>%
mutate(cal_soybean_quant_seeds_selling_kg = f_soybean_use_seeds_selling_quant * cal_soybean_measurement_seeds) %>%
mutate_at(vars(starts_with("cal_soybean_quant")), ~replace_na(., 0))
# also calculate the unit price
soybean_revenue <- soybean_revenue %>%
mutate(cal_soybean_price_kg = ifelse(cal_soybean_measurement_prod != 0, f_soybean_price/cal_soybean_measurement_sold, f_soybean_price),
cal_soybean_price_kg = ifelse(is.na(cal_soybean_quant_sold_kg) | cal_soybean_quant_sold_kg == 0, NA, cal_soybean_price_kg))%>%
mutate(cal_soybean_price_kg = replace_na(cal_soybean_price_kg, 0)) %>%
#
mutate(cal_soybean_price_selling_seeds_kg = ifelse(cal_soybean_measurement_prod != 0, f_soybean_price_selling_seeds/cal_soybean_measurement_seeds, f_soybean_price_selling_seeds),
cal_soybean_price_selling_seeds_kg = ifelse(is.na(cal_soybean_quant_seeds_selling_kg) | cal_soybean_quant_seeds_selling_kg == 0, NA, cal_soybean_price_selling_seeds_kg))%>%
mutate(cal_soybean_price_selling_seeds_kg = replace_na(cal_soybean_price_selling_seeds_kg, 0))
maize_revenue <- maize_revenue %>%
mutate(cal_maize_price_kg = ifelse(cal_maize_quant_sold_kg > 0 & is.na(cal_maize_price_kg), median(cal_maize_price_kg), cal_maize_price_kg))
onion_revenue <- onion_revenue %>%
mutate(cal_onion_price_kg = ifelse(cal_onion_quant_sold_kg > 0 & is.na(cal_onion_price_kg), median(cal_onion_price_kg), cal_onion_price_kg))
sunflower_revenue <- sunflower_revenue %>%
mutate(cal_sunflower_price_kg = ifelse(cal_sunflower_quant_sold_kg > 0 & is.na(cal_sunflower_price_kg), median(cal_sunflower_price_kg), cal_sunflower_price_kg))
soybean_revenue <- soybean_revenue %>%
mutate(cal_soybean_price_kg = ifelse(cal_soybean_quant_sold_kg > 0 & is.na(cal_soybean_price_kg), median(cal_soybean_price_kg), cal_soybean_price_kg))
#Maize
maize_quantities_subset <- maize_revenue %>% select(f_maize_measurement_prod, cal_maize_measurement_prod, f_maize_quant_prod, cal_maize_quant_prod_kg, f_maize_measurement_sold, cal_maize_measurement_sold, f_maize_quant_sold, cal_maize_quant_sold_kg, f_maize_measurement_lost, cal_maize_measurement_lost, f_maize_quant_lost, cal_maize_quant_lost_kg, f_maize_price, cal_maize_measurement_prod, cal_maize_price_kg, f_maize_measurement_seeds, cal_maize_measurement_seeds, f_maize_use_seeds_quant, cal_maize_quant_seeds_kg, f_maize_plant_quant, cal_maize_quant_plant_kg, f_maize_use_seeds_selling_quant, cal_maize_quant_seeds_selling_kg, f_maize_price_selling_seeds, cal_maize_price_selling_seeds_kg)
#Onion
onion_quantities_subset <- onion_revenue %>% select(f_onion_measurement_prod, cal_onion_measurement_prod, f_onion_quant_prod, cal_onion_quant_prod_kg, f_onion_measurement_sold, cal_onion_measurement_sold, f_onion_quant_sold, cal_onion_quant_sold_kg, f_onion_measurement_lost, cal_onion_measurement_lost, f_onion_quant_lost, cal_onion_quant_lost_kg, f_onion_price, cal_onion_measurement_prod, cal_onion_price_kg, f_onion_measurement_seeds, cal_onion_measurement_seeds, f_onion_use_seeds_quant, cal_onion_quant_seeds_kg, f_onion_plant_quant, cal_onion_quant_plant_kg, f_onion_use_seeds_selling_quant, cal_onion_quant_seeds_selling_kg, f_onion_price_selling_seeds, cal_onion_price_selling_seeds_kg)
#Sunflower
sunflower_quantities_subset <- sunflower_revenue %>% select(f_sunflower_measurement_prod, cal_sunflower_measurement_prod, f_sunflower_quant_prod, cal_sunflower_quant_prod_kg, f_sunflower_measurement_sold, cal_sunflower_measurement_sold, f_sunflower_quant_sold, cal_sunflower_quant_sold_kg, f_sunflower_measurement_lost, cal_sunflower_measurement_lost, f_sunflower_quant_lost, cal_sunflower_quant_lost_kg, f_sunflower_price, cal_sunflower_measurement_prod, cal_sunflower_price_kg, f_sunflower_measurement_seeds, cal_sunflower_measurement_seeds, f_sunflower_use_seeds_quant, cal_sunflower_quant_seeds_kg, f_sunflower_plant_quant, cal_sunflower_quant_plant_kg, f_sunflower_use_seeds_selling_quant, cal_sunflower_quant_seeds_selling_kg, f_sunflower_price_selling_seeds, cal_sunflower_price_selling_seeds_kg)
#Soybean
soybean_quantities_subset <- soybean_revenue %>% select(f_soybean_measurement_prod, cal_soybean_measurement_prod, f_soybean_quant_prod, cal_soybean_quant_prod_kg, f_soybean_measurement_sold, cal_soybean_measurement_sold, f_soybean_quant_sold, cal_soybean_quant_sold_kg, f_soybean_measurement_lost, cal_soybean_measurement_lost, f_soybean_quant_lost, cal_soybean_quant_lost_kg, f_soybean_price, cal_soybean_measurement_prod, cal_soybean_price_kg, f_soybean_measurement_seeds, cal_soybean_measurement_seeds, f_soybean_use_seeds_quant, cal_soybean_quant_seeds_kg, f_soybean_plant_quant, cal_soybean_quant_plant_kg, f_soybean_use_seeds_selling_quant, cal_soybean_quant_seeds_selling_kg, f_soybean_price_selling_seeds, cal_soybean_price_selling_seeds_kg)
# Check how many seasons there are to adjust the following code
table(maize_revenue$time_maize)
# #harmonise season if not
maize_revenue <- maize_revenue %>%
mutate(time_maize=ifelse(time_maize== "season1" |time_maize=="ወቅት1",  "season 1",
ifelse(time_maize== "ወቅት 2 ", "season 2" ,
time_maize)))
maize_revenue <- maize_revenue %>%
mutate(cal_maize_revenue = cal_maize_quant_sold_kg * cal_maize_price_kg,
cal_maize_revenue = replace_na(cal_maize_revenue, 0))
#Sum the quantities for those that entered data for multiple seasons
#Ensure we have 1 row of data for each farmer
#as we have some farmer reporting more than one season, aggregate values to have the total. use mean for the price
maize_revenue_subset <- maize_revenue %>%
mutate(f_maize_price = ifelse(f_maize_price==9999|f_maize_price==9998,NA, f_maize_price))%>%
group_by(`_submission__id`) %>%
## Summarize data for each submission
summarise(cal_maize_quant_prod_kg =  sum(cal_maize_quant_prod_kg,  na.rm = TRUE),
cal_maize_quant_sold_kg =  sum(cal_maize_quant_sold_kg, na.rm = TRUE),
cal_maize_quant_lost_kg =  sum(cal_maize_quant_lost_kg, na.rm = TRUE),
cal_maize_revenue = sum(cal_maize_revenue, na.rm = TRUE),
cal_maize_price_kg = mean(cal_maize_price_kg, na.rm = TRUE),
cal_maize_price = mean(f_maize_price, na.rm = TRUE),
cal_maize_quant_seeds_kg = sum(cal_maize_quant_seeds_kg, na.rm = TRUE),
cal_maize_quant_plant_kg = sum(cal_maize_quant_plant_kg, na.rm = TRUE),
cal_maize_quant_seeds_selling_kg = sum(cal_maize_quant_seeds_selling_kg, na.rm = TRUE),
cal_maize_price_selling_seeds = mean(f_maize_price_selling_seeds, na.rm = TRUE),
cal_maize_price_selling_seeds_kg = mean(cal_maize_price_selling_seeds_kg, na.rm = TRUE),
# Take the first reported value
cal_maize_measurement_sold = first(cal_maize_measurement_sold),
f_maize_measurement_sold = first(f_maize_measurement_sold),
f_maize_measurement_sold_other = first(f_maize_measurement_sold_other),
cal_maize_measurement_prod = first(cal_maize_measurement_prod),
f_maize_measurement_prod = first(f_maize_measurement_prod),
f_maize_measurement_prod_other = first(f_maize_measurement_prod_other),
f_maize_income_share = first(f_maize_income_share),
f_maize_own_consumption_yn = first(f_maize_own_consumption_yn),
f_maize_own_consumption = first(f_maize_own_consumption),
f_maize_lost_yn = first(f_maize_lost_yn),
f_maize_measurement_lost = first(f_maize_measurement_lost),
f_maize_use_seeds_yn = first(f_maize_use_seeds_yn),
f_maize_measurement_seeds = first(f_maize_measurement_seeds)
)
##Replace missing values in focus revenue by zero
# Data <- Data %>%
#   mutate(cal_focus_revenue = ifelse(is.na(cal_focus_revenue), 0, cal_focus_revenue))
