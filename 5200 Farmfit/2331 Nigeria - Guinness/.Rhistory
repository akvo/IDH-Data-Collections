knitr::opts_chunk$set(echo = TRUE)
library(here); library(readxl); library(openxlsx);
library(plyr); library(dplyr); library(tidyr); library(tidylog); library(tidyselect)
library(stringr); library(data.table); library(reshape2)
library(zoo);library(splitstackshape) ;library(tidyverse)
install.packages(here)
install.packages("here")
install.packages("here")
knitr::opts_chunk$set(echo = TRUE)
install.packages("openxlsx")
install.packages("tidylog")
install.packages("tidyselect")
install.packages("stringr")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
knitr::opts_chunk$set(echo = TRUE)
install.packages("reshape2")
install.packages("zoo")
install.packages("splitstackshape")
#install.packages("splitstackshape")
library(here); library(readxl); library(openxlsx);
library(plyr); library(dplyr); library(tidyr); library(tidylog); library(tidyselect)
library(stringr); library(data.table); library(reshape2)
library(zoo);library(splitstackshape) ;library(tidyverse)
#install.packages("splitstackshape")
library(here); library(readxl); library(openxlsx);
library(plyr); library(dplyr); library(tidyr); library(tidylog); library(tidyselect)
library(stringr); library(data.table); library(reshape2)
library(zoo);library(splitstackshape) ;library(tidyverse)
case = "Guinness"
sdm_crop = "sorghum"
country = "Nigeria"
##DOWNLOAD THESE ALL TOGETHER IN A FOLDER AND RENAME THEM
pi_filename <- "pi_2023_guinness_sorghum.xlsx"
data_filename <- "493660002_guinness_sorghum_raw_data.xlsx"
survey_filename <- "survey_guinness_sorghum.xlsx"
data_delivery <- "2023_guinness_anom_sorghum.xlsx"
question_library <- read_excel("question library format v3.1.1.xlsx",
sheet = "Full Survey", skip = 2)
vars_transformed <- read_excel("variables with transformation.xlsx")
household_demographics  <- read_excel("household_demographics_var.xlsx")
vars_dashboard <- read_excel("variable names input dashboard.xlsx")
# DATA TYPE Set factors to integers
factor_to_int <- function(x){
as.numeric(as.character(x))
}
# Find and replace outliers
outlier_detection <- function(x){
ifelse(
x > (mean(x, na.rm=TRUE) + sd(x, na.rm=TRUE)*3) |
x < (mean(x, na.rm=TRUE) - sd(x, na.rm=TRUE)*3),
9997,
x
)
}
options(scipen = 999)
# count values without NA
count_n <- function(x){sum(!is.na(x))}
##  ---- Import data ----
# Read data from the data folder
Data <- read_excel(data_filename)
Data_raw <- read_excel(data_filename)
Data_raw <- Data_raw %>%
select(-starts_with("pi_"), -name_of_farmer, -mobile_number_farmer)
# Read file with survey structure
survey_questions <- read_excel((survey_filename),sheet ="Full Survey", skip=2)
survey_questions %<>%
# Fill excel merged cells from the section
mutate(Title = na.locf(Title, na.rm = FALSE)) %>%
# Select right columns
select("Title", "Variable name", "Text",
"Question type", "Options",
"Allow multiple") %>%
# Trim trailing spaces
mutate_if(is.character, str_trim) %>%
# Rename columns
rename("section" = "Title",
"variable" = "Variable name",
"question" = "Text",
"type" = "Question type",
"options" = "Options",
"multiple" = "Allow multiple") %>%
# All variables to lowercase
mutate_all(tolower) %>%
# Filter the empty variables
filter(!is.na(variable))
view(survey_questions)
# Collect the different variables, numerical questions:
numerical_columns <- survey_questions %>%
filter(type == "number") %>%
select("variable") %>% pull()
## ---- Count initial number of participants
nr_participants_raw <- length(unique(Data$Identifier))
Data <- Data %>%
# Set the date to date format
mutate(`Submission Date` = as.Date(`Submission Date`, format = "%d-%m-%Y")) %>%
# Remove irrelevant columns
select(-c(`Display Name`,`Device identifier`,`Instance`,
`Submitter`,
`Form version`)) %>%
select(-contains("--option--")) %>%
# All column names to lowercase
rename_all(funs(tolower)) %>%
# Rename option variables
rename_all( funs(gsub("--other--", "_other2", ., perl=T))) %>%
# All variables to lowercase
mutate_all(tolower) %>%
# Remove to farmers that didn't participate
mutate(ic_informed_consent = na.locf(ic_informed_consent, na.rm = FALSE)) %>%
filter(ic_informed_consent == "accepted to participate")  %>%
# Numerical columns to numeric data type
mutate_at(vars(numerical_columns), funs(as.numeric)) %>%
#General case
mutate(f_harvest_num = as.numeric(f_harvest_num)) %>%
## In many cases, the crop has been added to this variable name. Variable will be f_[CROP]_harvest_num. See example below for a cocoa case.
#mutate(f_cocoa_harvest_num = as.numeric(f_cocoa_harvest_num)) %>%
# Remove all "other" option text ("other, please specify")
# mutate_each(funs(str_remove(., "other, please specify"))) %>%
mutate_if(is.character, funs(gsub("other, please specify", NA,.))) %>%
mutate_if(is.character, funs(gsub("\\|$","",.))) %>%
# Remove trailing spaces
mutate_if(is.character, str_trim) %>%
# Remove punctuation and special characters - EXCEPT for "|"
mutate_if(is.character, funs(gsub("[^\\|[:^punct:]]", "", ., perl=T)))
# First check what are the unit measurements reported in this case.
table(Data$f_unit_land)
table(Data$f_unit_land_other2)
# Mutate the different units to acres. We need a farm size in acres for the total farm size, focus crop, other main crop 1 and othermaincrop 2.
Data <- Data %>%
unite("f_unit_land", c(f_unit_land, f_unit_land_other2),
na.rm = TRUE, remove = FALSE, sep=" ") %>%
mutate(f_size_acre = ifelse(f_unit_land == "hectares", f_size*2.471, f_size)) %>%
mutate(f_focus_crop_size_acre = ifelse(f_unit_land == "hectares", f_focus_crop_size*2.471, f_focus_crop_size)) %>%
mutate(f_size_othermaincrop_1_acre = ifelse(f_unit_land == "hectares",f_size_othermaincrop_1*2.471,f_size_othermaincrop_1))%>%
mutate(f_size_othermaincrop_2_acre = ifelse(f_unit_land == "hectares", f_size_othermaincrop_2*2.471, f_size_othermaincrop_2))%>%
# Extend farm size to determine productivity
mutate(f_focus_crop_size_acre = na.locf(f_focus_crop_size_acre, na.rm = FALSE))
Data <- Data %>%
mutate(cal_hh_farmer_age = 2023 - hh_farmer_birthyear,
cal_hh_head_age = 2023-hh_head_birthyear) #update to current year, check whether applicable, not always included.
# Number of participants who gave informed consent
nr_participants_ic <- length(unique(Data$identifier))
# NUMBER OF SEASONS
number_of_seasons <- max(Data$f_harvest_num, na.rm=TRUE)
nr_participants_ic
#table(Data$f_focus_measurement_prod)
#table(Data$f_focus_measurement_sold)
#table(Data$f_focus_measurement_lost)
table(Data$f_focus_own_consumption_measurement)
Data <- Data %>%
##Measurement unit for production
mutate(cal_focus_measurement_prod := ifelse(grepl("[[:digit:]]", f_focus_measurement_prod),
extract_numeric(f_focus_measurement_prod),
ifelse(f_focus_measurement_prod %in% c("KG","kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_focus_measurement_prod = ifelse(f_focus_measurement_prod == "150 kg bag", 150, cal_focus_measurement_prod)) %>%
mutate(cal_focus_measurement_prod = ifelse(f_focus_measurement_prod == "85 kg bags", 85, cal_focus_measurement_prod)) %>%
mutate(cal_focus_measurement_prod = ifelse(f_focus_measurement_prod == "ton", 1000, cal_focus_measurement_prod))
Data <- Data %>%
##Measurement unit for sales focus crop
mutate(cal_focus_measurement_sold := ifelse(
grepl("[[:digit:]]", f_focus_measurement_sold),
extract_numeric(f_focus_measurement_sold),
ifelse(f_focus_measurement_sold %in% c("KG","kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_focus_measurement_sold = ifelse(f_focus_measurement_sold == "100 kg bags",
100, cal_focus_measurement_sold)) %>%
mutate(cal_focus_measurement_sold = ifelse(f_focus_measurement_sold == "85 kg bags",
85, cal_focus_measurement_sold))
Data <- Data %>%
# measurement unit for lost
mutate(cal_focus_lost_measurement := ifelse(
grepl("[[:digit:]]", f_focus_measurement_lost),
extract_numeric(f_focus_measurement_lost),
ifelse(f_focus_measurement_lost %in% c("KG","kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_focus_lost_measurement = ifelse(f_focus_measurement_lost == "85 kg bags", 85, cal_focus_lost_measurement))
Data <- Data %>%
# measurement unit for lost
mutate(cal_focus_measurement_own_consumption := ifelse(
grepl("[[:digit:]]", f_focus_own_consumption_measurement),
extract_numeric(f_focus_own_consumption_measurement),
ifelse(f_focus_own_consumption_measurement %in% c("KG","kg","kilo","kgs","kilogram", "kilograms kg"), 1, 0))) %>%
mutate(cal_focus_measurement_own_consumption = ifelse(f_focus_own_consumption_measurement == "85 kg bags", 85, cal_focus_measurement_own_consumption))
##Calculate the quantities focus crop
Data <- Data %>%
mutate(cal_focus_quant_prod_kg = f_focus_quant_prod * cal_focus_measurement_prod) %>%
mutate(cal_focus_quant_sold_kg = f_focus_quant_sold * cal_focus_measurement_sold) %>%
mutate(cal_focus_quant_lost_kg = f_focus_quant_lost * cal_focus_lost_measurement) %>%
mutate(cal_focus_quant_own_consumption_kg = f_focus_own_consumption * cal_focus_measurement_own_consumption)
# also calculate the unit price
Data <- Data %>%
mutate(cal_focus_price = ifelse(cal_focus_measurement_prod != 0, f_focus_price/cal_focus_measurement_prod, f_focus_price))
quantities_produced_subset <- Data %>% select(f_focus_measurement_prod, cal_focus_measurement_prod, f_focus_quant_prod, cal_focus_quant_prod_kg)
quantities_sold_subset <- Data %>% select(f_focus_measurement_sold, cal_focus_measurement_sold, f_focus_quant_sold, cal_focus_quant_sold_kg)
quantities_lost_subset <- Data %>% select(f_focus_measurement_lost, cal_focus_lost_measurement, f_focus_quant_lost, cal_focus_quant_lost_kg)
quantities_own_consumption_subset <- Data %>% select(f_focus_own_consumption_measurement, cal_focus_measurement_own_consumption, f_focus_own_consumption, cal_focus_quant_own_consumption_kg)
price_subset <- Data %>% select(f_focus_price, cal_focus_measurement_prod, cal_focus_price)
price_subset
Data <- Data %>%
mutate(cal_focus_revenue = cal_focus_quant_sold_kg * cal_focus_price)
##X) STANDARD APPROACH Inbetween, adjust for repeated question groups (IF APPLICABLE)  ----
##Adress values for those that have multiple seasons
Data <- Data %>%
#Identify duplicates
group_by(identifier, f_focus_rev_timeperiod) %>%
mutate(count_dup = n()) %>% # Count duplicates within each group
mutate(count_dup = ifelse(is.na(f_focus_rev_timeperiod), NA, count_dup)) %>% # Check whether we don't make mistakes here. For some cases, farmers enter twice wrongly, while in other cases entering the same values for 2 seasons is ok.
#Identify those with multiple seasons
group_by(identifier, f_focus_rev_timeperiod) %>%
mutate(count_seasons = n()) %>% # Count the number of seasons for each group
mutate(count_seasons = ifelse(is.na(f_focus_rev_timeperiod) | count_seasons > 1, NA, count_seasons)) %>%
#Replace values with 0 for those that entered the data twice
mutate(`repeat no` = as.numeric(`repeat no`)) %>%
mutate(cal_focus_quant_prod_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_focus_quant_prod_kg)) %>%
mutate(cal_focus_quant_sold_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_focus_quant_sold_kg)) %>%
mutate(cal_focus_quant_own_consumption_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_focus_quant_own_consumption_kg )) %>%
mutate(cal_focus_quant_lost_kg = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_focus_quant_lost_kg)) %>%
mutate(cal_focus_revenue = ifelse(`repeat no` >1  & count_dup > 1, 0, cal_focus_revenue)) %>%
#Sum the quantities for those that entered data for multiple seasons
group_by(identifier, count_seasons) %>%
mutate(cal_focus_quant_prod_kg =  sum(cal_focus_quant_prod_kg)) %>%
mutate(cal_focus_quant_sold_kg =  sum(cal_focus_quant_sold_kg)) %>%
mutate(cal_focus_quant_own_consumption_kg =  sum(cal_focus_quant_own_consumption_kg)) %>%
mutate(cal_focus_quant_lost_kg =  sum(cal_focus_quant_lost_kg)) %>%
mutate(cal_focus_revenue = sum(cal_focus_revenue)) %>%
#Ensure we have 1 row of data for each farmer
mutate(cal_focus_quant_prod_kg = ifelse(`repeat no` >1 , NA, cal_focus_quant_prod_kg)) %>%
mutate(cal_focus_quant_sold_kg = ifelse(`repeat no` >1  , NA, cal_focus_quant_sold_kg)) %>%
mutate(cal_focus_quant_own_consumption_kg = ifelse(`repeat no` >1  , NA, cal_focus_quant_own_consumption_kg )) %>%
mutate(cal_focus_quant_lost_kg = ifelse(`repeat no` >1 , NA, cal_focus_quant_lost_kg)) %>%
mutate(cal_focus_revenue = ifelse (`repeat no`>1, NA, cal_focus_revenue)) %>%
ungroup() %>%
select(-count_dup, -count_seasons)
##Replace missing values in focus revenue by zero
Data <- Data %>%
mutate(cal_focus_revenue = ifelse(is.na(cal_focus_revenue), 0, cal_focus_revenue))
Data <- Data %>%
mutate(cal_focus_productivity_acre = cal_focus_quant_prod_kg/f_focus_crop_size_acre)
