mutate(cal_labour_cost = ifelse(is.na(cal_labour_cost), 0, cal_labour_cost),
cal_inputs_costs = ifelse(is.na(cal_inputs_costs), 0, cal_inputs_costs)) %>%
mutate(cal_focus_cost = cal_labour_cost + cal_inputs_costs + f_transport) %>%
##  ---- 3f) Calc: Net-income focus crop ----
mutate(cal_focus_income = cal_focus_revenue - cal_focus_cost)
##  ---- 4) Calc: Net-income other crops ----
Data <- Data %>%
mutate(cal_othermaincrop_1_cost = Data %>%
select(starts_with("f_othermaincrop_1_cost")) %>%
apply(.,1,sum, na.rm=TRUE)) %>%
mutate(cal_othermaincrop_2_cost = Data %>%
select(starts_with("f_othermaincrop_2_cost")) %>%
apply(.,1,sum, na.rm=TRUE)) %>%
mutate(cal_othermaincrop_1_inc_sold = ifelse(is.na(f_othermaincrop_1_inc_sold), 0, f_othermaincrop_1_inc_sold)) %>%
mutate(cal_othermaincrop_2_inc_sold = ifelse(is.na(f_othermaincrop_2_inc_sold), 0, f_othermaincrop_2_inc_sold))  %>%
mutate(cal_othermaincrop_income = cal_othermaincrop_1_inc_sold - cal_othermaincrop_1_cost + cal_othermaincrop_2_inc_sold - cal_othermaincrop_2_cost  ) %>%
mutate(cal_other_crop_income = ifelse(is.na(f_other_crop_income), 0, f_other_crop_income)) %>%
mutate(cal_other_crop_income = cal_othermaincrop_income + cal_other_crop_income) %>%
select(-cal_othermaincrop_income)
##  ---- 5) Calc: Net-income livestock ----
Data <- Data %>%
#Revenue -!!! Check which approach is used.
## 1) AsK for income at once (f_livestock_income_total) OR
## 2) per type of livestock (f_livestock_income_[ANIMAL])
##Delete the code for the approach that does not apply
#Approach 2
mutate(cal_livestock_revenue = Data %>%
select(contains("f_livestock_income"), -contains("type")) %>%
rowSums(na.rm=TRUE)) %>%
mutate(cal_livestock_revenue= ifelse(is.na(cal_livestock_revenue), 0, cal_livestock_revenue)) %>%
#Input costs
mutate(cal_livestock_inputs_cost = Data %>%
select(f_livestock_costs_fodderwater,
f_livestock_costs_medics) %>%
rowSums(na.rm=TRUE)) %>%
mutate(cal_livestock_inputs_cost= ifelse(is.na(cal_livestock_inputs_cost), 0, cal_livestock_inputs_cost))
#Labour cost
Data <- Data %>%
mutate(cal_livestock_labour_cost = Data %>%
select(f_livestock_nr_hired_labourers,
f_livestock_days_hiredlabour,
f_livestock_wages_hiredlabour) %>%
apply(., 1, prod, na.rm=FALSE)) %>%
mutate(cal_livestock_labour_cost= ifelse(is.na(cal_livestock_labour_cost), 0, cal_livestock_labour_cost))
# total cost
Data <- Data %>%
mutate(cal_livestock_cost = Data %>%
select(cal_livestock_inputs_cost,
cal_livestock_labour_cost) %>%
rowSums(na.rm=FALSE)) %>%
#mutate(cal_livestock_cost= ifelse(is.na(cal_livestock_cost), 0, cal_livestock_cost)) %>%
#net income
mutate(cal_livestock_income = cal_livestock_revenue - cal_livestock_cost)
##  ---- 6) Calc: Other farm costs ----
# EQUIPMENT
Data <- Data %>%
mutate(cal_equipment_costs = Data %>%
select(f_nonmech_equip_costs, f_mech_equip_costs, f_materials_other_costs) %>%
apply(.,1,sum, na.rm=TRUE)) %>%
# GENERAL ON FARM COSTS
mutate(cal_farm_other_costs = Data %>%
select(f_costs_land,
hh_loan_one_other_costs_interest,
hh_loan_one_agri_costs_interest,
hh_loan_multiple_largest_costs_interest,
hh_loan_multiple_agri_costs_interest) %>%
apply(., 1, sum, na.rm=TRUE))
##  ---- 7) Calc: Off farm labour income----
Data <- Data %>%
mutate(cal_off_farm_labour_income = Data %>%
select(f_nonfarm_enterpr_1_profit,
f_nonfarm_enterpr_2_profit,
f_nonfarm_enterpr_3_profit,
f_income_offfarmlabour_wage) %>%
apply(., 1, sum, na.rm=TRUE))
##  ---- 8) Calc: Off farm non labour income----
Data <- Data %>%
mutate(cal_offfarm_non_labour_income = Data %>%
select(starts_with("f_income_other_"), -contains("_type")) %>%
apply(.,1,sum, na.rm=TRUE))
##  ---- 9) Calc: Farm income and actual income----
Data <- Data %>%
mutate(cal_farm_income = cal_focus_income + cal_other_crop_income + cal_livestock_income -
cal_equipment_costs - cal_farm_other_costs) %>%
mutate(cal_actual_income = cal_focus_income + cal_other_crop_income + cal_livestock_income -
cal_equipment_costs - cal_farm_other_costs + cal_off_farm_labour_income + cal_offfarm_non_labour_income) %>%
mutate(cal_farm_income = ifelse(is.na(sdm_farmer)  , NA, cal_farm_income )) %>%
mutate(cal_actual_income  = ifelse(is.na(sdm_farmer) , NA, cal_actual_income))
##  ---- ______----
##  ---- Calculate net promotor score----
#NPS = (Promoters/total # farmers) - (Detractors/total # farmers)
#This is calculated from the variable cs_recommendation:
#“How likely is it that you would recommend [SDM company] to a friend or peer?”)
#Not likely, somewhat likely, likely = detractor
#Very likely = promoter
hh_farmer_gender <- c("all farmers")
NSP_total <- Data %>%
select(`repeat no`, cs_recommendation) %>%
filter(`repeat no` == 1)%>%
mutate(cs_recommendation = ifelse(is.na(cs_recommendation), "no input",cs_recommendation)) %>%
mutate(detractor = ifelse(cs_recommendation == "not likely"| cs_recommendation == "somewhat likely"| cs_recommendation == "likely",1,0),
promoter = ifelse(cs_recommendation == "very likely", 1,0),
passive = ifelse(cs_recommendation == "most likely"| cs_recommendation == "i dont know",1,0),
nr_recommenders = ifelse(cs_recommendation == "no input", 0,1)) %>%
summarize(nr_promoters = sum(promoter),
nr_detractors = sum(detractor),
nr_passive = sum(passive),
nr_farmers = sum(nr_recommenders)) %>%
mutate(nsp_total = round((nr_promoters/nr_farmers) - (nr_detractors/nr_farmers),2),
hh_farmer_gender = hh_farmer_gender)
NSP_by_gender <- Data %>%
select(`repeat no`, cs_recommendation, hh_farmer_gender) %>%
filter(`repeat no` == 1)%>%
mutate(cs_recommendation = ifelse(is.na(cs_recommendation), "no input",cs_recommendation)) %>%
mutate(detractor = ifelse(cs_recommendation == "not likely"| cs_recommendation == "somewhat likely"| cs_recommendation == "likely",1,0),
promoter = ifelse(cs_recommendation == "very likely", 1,0),
passive = ifelse(cs_recommendation == "most likely"| cs_recommendation == "i dont know",1,0),
nr_recommenders = ifelse(cs_recommendation == "no input", 0,1)) %>%
group_by(hh_farmer_gender) %>%
summarize(nr_promoters = sum(promoter),
nr_detractors = sum(detractor),
nr_passive = sum(passive),
nr_farmers = sum(nr_recommenders)) %>%
mutate(nsp_gender = round((nr_promoters/nr_farmers) - (nr_detractors/nr_farmers),2))
NSP <- full_join(NSP_total, NSP_by_gender)
NSP <- NSP %>% select(hh_farmer_gender, nr_farmers, nr_promoters, nr_detractors,nr_passive, nsp_total, nsp_gender)
##  ---- ______----
##  ---- Prepare anom clean data for further use----
#Private information is deleted
#We need to keep the variable capturing the highest level of location (pi_location_cascade_first..) for the Farmfit portal. Check what variable that is for each case, this differs.
#Rename it temporarily such that it is not deleted. Always rename it to pi_location_cascade_first_level
Data <- Data %>%
rename(location_cascade_region = pi_location_cascade_region) %>%
select(
-c(starts_with("pi_"), -contains("county")),
-c(name_of_farmer, mobile_number_farmer)) %>%
rename(pi_location_cascade_first_level = location_cascade_region)
##  ---- _______ ----
##  ---- Summary statistics ----
##  ---- 1) ALL FARMERS ----
farmer_type <- c("all farmers")
all_var <- Data %>%
filter(`repeat no`== 1) %>%
select(`repeat no`) %>%
table() %>%
melt(c("farmer type"), value.name="n") %>%
mutate(`farmer type` = farmer_type)
## ---- a) numerical descriptives ----
numerical_descriptives_all_farmers <- Data %>%
select_if(is.numeric) %>%
summarise_each(funs(round(mean(., na.rm = TRUE),2))) %>%
melt(value.name="mean") %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(round(sd(., na.rm = TRUE),2))) %>%
melt(value.name="sd")) %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(min(., na.rm = TRUE))) %>%
melt(value.name="min")
) %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(round(max(., na.rm = TRUE),2))) %>%
melt(value.name="max")
) %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(count_n))  %>%
melt(value.name="freq")
) %>%
left_join(survey_questions) %>%
select("variable", "freq", "mean","sd", "min","max")
## ---- b) single categorical descriptives ----
single_mc <- survey_questions %>%
filter(type=="option") %>%
filter(is.na(multiple)) %>%
pull(variable)
single_categorical_descriptives_all_farmers <- all_var
for(i in single_mc){
if(any(names(Data) %in% i)){
frequencies <- Data %>%
filter(`repeat no` ==1) %>%
select(all_of(i)) %>%
table() %>%
melt(c("category"),value.name = "freq") %>%
mutate(n = nr_participants_raw) %>%
mutate(`farmer type` = farmer_type) %>%
mutate("variable" = i) %>%
left_join(all_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
single_categorical_descriptives_all_farmers <- single_categorical_descriptives_all_farmers %>%
full_join(frequencies) %>%
select(variable, `farmer type`, n, category, freq, "%")
}
}
## ---- c) multiple categorical descriptives ----
multiple_mc <- survey_questions %>%
filter(type=="option") %>%
filter(multiple == "yes") %>%
pull(variable)
multiple_categorical_descriptives_all_farmers <- all_var
for(j in multiple_mc){
if(any(names(Data) %in% j)){
frequencies <- Data %>%
select(all_of(j)) %>%
cSplit(j, "|") %>%
gather(key, value) %>%
select(-key) %>% table() %>%
melt(c("category"), value.name="freq") %>%
mutate(n = nr_participants_raw) %>%
mutate("variable" = j) %>%
left_join(all_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
multiple_categorical_descriptives_all_farmers <- multiple_categorical_descriptives_all_farmers %>%
full_join(frequencies) %>%
select(variable, `farmer type`, n, category, freq, "%")
}
}
##  ---- _______ ----
##  ---- 2) BY GENDER ----
# Gender descriptive for aggregation
gender_var <- Data %>%
select(hh_farmer_gender) %>%
table() %>%
melt("hh_farmer_gender", value.name="n")
## ---- a) numerical descriptives ----
numerical_descriptives_by_gender <- Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(round(mean(., na.rm = TRUE),2))) %>%
melt(value.name="mean") %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(round(sd(., na.rm = TRUE),2))) %>%
melt(value.name="sd")) %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(min(., na.rm = TRUE))) %>%
melt(value.name="min")
) %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(round(max(., na.rm = TRUE),2))) %>%
melt(value.name="max")
) %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(count_n))  %>%
melt(value.name="freq")
) %>%
left_join(survey_questions) %>%
left_join(gender_var) %>%
select("variable","hh_farmer_gender","n", "freq", "mean","sd", "min","max")
## ---- b) single categorical descriptives ----
single_mc <- survey_questions %>%
filter(type=="option") %>%
filter(is.na(multiple)) %>%
filter(variable != "hh_farmer_gender") %>%
pull(variable)
single_categorical_descriptives_by_gender <- gender_var
for(i in single_mc){
if(any(names(Data) %in% i)){
frequencies <- Data %>%
select(hh_farmer_gender, all_of(i)) %>%
table() %>%
melt(c("hh_farmer_gender","category"), value.name="freq") %>%
mutate("variable" = i) %>%
left_join(gender_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
single_categorical_descriptives_by_gender <- single_categorical_descriptives_by_gender %>%
full_join(frequencies) %>%
select(variable, hh_farmer_gender, n, category, freq, "%")
}
}
## ---- c) multiple categorical descriptives ----
multiple_mc <- survey_questions %>%
filter(type=="option") %>%
filter(multiple == "yes") %>%
pull(variable)
multiple_categorical_descriptives_by_gender <- gender_var
for(j in multiple_mc){
if(any(names(Data) %in% j)){
frequencies <- Data %>%
select(hh_farmer_gender, all_of(j)) %>%
cSplit(j, "|") %>%
gather(key, value, -hh_farmer_gender) %>%
select(-key) %>% table() %>%
melt(c("hh_farmer_gender","category"), value.name="freq") %>%
mutate("variable" = j) %>%
left_join(gender_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
multiple_categorical_descriptives_by_gender <- multiple_categorical_descriptives_by_gender %>%
full_join(frequencies) %>%
select(variable, hh_farmer_gender, n, category, freq, "%")
}
}
## ---- ___ ----
## ---- Check completeness of codebook ----
##All variables that are in the data should get a description in the codebook. That's why we check this and information where missing
##We also check whether we have all the variables that are required for the data delivery
question_library <- question_library %>%
dplyr::rename(section = "Title",
question = "Text",
variable = "Variable name",
type = "Question type",
options = "Options",
multiple = "Allow multiple") %>%
mutate_all(tolower) %>%
select(section,
question,
variable,
type,
options,
multiple) %>%
fill(section)
unmatched <- list()
## Remove repeated rows for household members
if("identifier" %in% colnames(Data)){
Data <- Data %>%
group_by(identifier) %>%
mutate(id = row_number())
for (nr in c(1:15)){
### ---- delete the unnecessary --- only if household roster questions are asked, check also which ones are used
#hh_member_birthyear_nr <- paste0("hh_member_birthyear_", nr)
#hh_member_gender_nr <- paste0("hh_member_gender_", nr)
#hh_member_education_nr <- paste0("hh_member_education_", nr)
hh_unpaidlabour_hhactivities_nr <- paste0("hh_unpaidlabour_hhactivities_", nr)
hh_focuscrop_nr <- paste0("hh_focuscrop_", nr)
hh_otherfarm_activities_nr <- paste0("hh_otherfarm_activities_", nr)
hh_offarmlabour_activities_nr <- paste0("hh_offarmlabour_activities_", nr)
Data <- Data %>%
#Delete the rows that do not apply
mutate(#!!sym(hh_member_birthyear_nr) := ifelse(id == nr, hh_member_birthyear, NA),
#!!sym(hh_member_gender_nr) := ifelse(id == nr, hh_member_gender, NA),
#!!sym(hh_member_education_nr) := ifelse(id == nr, hh_member_education, NA),
!!sym(hh_unpaidlabour_hhactivities_nr) := ifelse(id == nr, hh_unpaidlabour_hhactivities_hrs, NA),
!!sym(hh_focuscrop_nr) := ifelse(id == nr, hh_focuscrop_hrs, NA),
!!sym(hh_otherfarm_activities_nr) := ifelse(id == nr, hh_otherfarm_activities_hrs, NA),
!!sym(hh_offarmlabour_activities_nr) := ifelse(id == nr, hh_offarmlabour_activities_hrs, NA),) %>%
#fill(!!sym(hh_member_birthyear_nr)) %>%
#fill(!!sym(hh_member_birthyear_nr), .direction = "up") %>%
#fill(!!sym(hh_member_gender_nr)) %>%
#fill(!!sym(hh_member_gender_nr), .direction = "up") %>%
#fill(!!sym(hh_member_education_nr)) %>%
#fill(!!sym(hh_member_education_nr), .direction = "up") %>%
fill(!!sym(hh_unpaidlabour_hhactivities_nr)) %>%
fill(!!sym(hh_unpaidlabour_hhactivities_nr), .direction = "up") %>%
fill(!!sym(hh_focuscrop_nr)) %>%
fill(!!sym(hh_focuscrop_nr), .direction = "up") %>%
fill(!!sym(hh_otherfarm_activities_nr)) %>%
fill(!!sym(hh_otherfarm_activities_nr), .direction = "up") %>%
fill(!!sym(hh_offarmlabour_activities_nr)) %>%
fill(!!sym(hh_offarmlabour_activities_nr), .direction = "up") %>%
mutate(#!!sym(hh_member_birthyear_nr) := ifelse(id >1 , NA, !!sym(hh_member_birthyear_nr) ),
#!!sym(hh_member_gender_nr) := ifelse(id >1 , NA, !!sym(hh_member_gender_nr) ),
#!!sym(hh_member_education_nr) := ifelse(id >1 , NA, !!sym(hh_member_education_nr) ),
!!sym(hh_unpaidlabour_hhactivities_nr) := ifelse(id >1 , NA, !!sym(hh_unpaidlabour_hhactivities_nr) ),
!!sym(hh_focuscrop_nr) := ifelse(id >1 , NA, !!sym(hh_focuscrop_nr) ),
!!sym(hh_otherfarm_activities_nr) := ifelse(id >1 , NA, !!sym(hh_otherfarm_activities_nr) ),
!!sym(hh_offarmlabour_activities_nr) := ifelse(id >1 , NA, !!sym(hh_offarmlabour_activities_nr) ))
}
}
Data <- Data %>%
filter(`repeat no` == 1) %>%
select(-id,
#-hh_member_birthyear,
#-hh_member_gender,
#-hh_member_education,
-hh_unpaidlabour_hhactivities_hrs,
-hh_focuscrop_hrs,
-hh_otherfarm_activities_hrs,
-hh_offarmlabour_activities_hrs)
#Make a dataframe listing all variables
variable <-ls(Data)
data <- data.frame(variable)
## ---- Variables ending with other  ---
#Check if data variable is in codebook
data$compare <-data$variable  %in%  survey_questions$variable
#if it's a "other variable", do not remove
data <- data %>%
mutate(compare = ifelse(grepl('_other$',variable) & compare == FALSE , FALSE, TRUE)) %>%
filter(compare == FALSE)
survey_questions <- bind_rows(survey_questions, data)
survey_questions <- survey_questions %>%
arrange(variable)  %>%
fill(question,
section) %>%
mutate(type = ifelse(!is.na(compare), "free text",type)) %>%
mutate(variable_2 = str_remove(variable,'_other$')) %>%
mutate(same = ifelse(variable_2== lag(variable_2), 1, 0)) %>%
mutate(section = ifelse(!is.na(compare) & same == 0 , "unknown", section),
question = ifelse(!is.na(compare) & same == 0 , "no question available", question)) %>%
select(-compare, -variable_2, -same)
## ---- Calculated variables  ---
#Check if its a calculated variable or a variable from the question library
variable <-ls(Data)
data <- data.frame(variable)
data$compare <-data$variable  %in%  survey_questions$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <-data$variable  %in%  vars_transformed$variable
data <-  data %>%
filter(compare == FALSE)    %>%
select(-compare)
#Check if its in the question library
data$compare <-data$variable  %in%  question_library$variable
data <- data %>%
filter(compare == TRUE) %>%
select(-compare)
#If so, add it to the codebook
data <- merge(data, question_library, by.x = "variable")
survey_questions <- bind_rows(survey_questions, data)
#Check if it's not in calculations or question library
variable <-ls(Data)
data <- data.frame(variable)
data$compare <-data$variable  %in%  survey_questions$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <-data$variable  %in%  vars_transformed$variable
data <-  data %>%
filter(compare == FALSE)    %>%
select(-compare)
data$compare <-data$variable  %in%  question_library$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <- data$variable %in% household_demographics$variable
data <- data %>%
filter(compare == TRUE) %>%
select(-compare)
data <- merge(data, household_demographics, by.x = "variable")
survey_questions <- bind_rows(survey_questions, data)
# --- Check household demographic questions ---
hh_demo <- survey_questions %>%
filter(str_detect(variable, 'hh_member_')) %>%
arrange(variable) %>%
fill(section, options)
survey_questions <- survey_questions %>%
filter(!str_detect(variable, 'hh_member_'))
survey_questions <- bind_rows(survey_questions, hh_demo)
# ---- dashboard variables ----
#All variables in delivered data into dataframe
variable <-ls(Data)
data <- data.frame(variable)
#Check if data variable is dashboard list
vars_dashboard$compare <- vars_dashboard$latest_var %in% data$variable
data <- vars_dashboard %>%
filter(!is.na(latest_var)) %>%
select(-old_var, -new_var ) %>%
filter(compare == FALSE) %>%
filter(is.na(note))
#Prepare final list of unmatched vars - Check these by hand and ensure the variable names are aligned with 1) the question library,
# 2) list of calculated variables, 3) Household demographic variables. Ensure that all variables part of the cleaned data 4) or dashboard variable names
# are described in the codebook.
variable <-ls(Data)
data <- data.frame(variable)
data$compare <-data$variable  %in%  survey_questions$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <-data$variable  %in%  vars_transformed$variable
data <-  data %>%
filter(compare == FALSE)    %>%
select(-compare)
data$compare <-data$variable  %in%  question_library$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
## ---- ___ ----
## ---- Combine all inputs in one excel ----
sets <- list(
"Codebook" = survey_questions,
"Cleaned Data" = Data,
"Raw Data (anonymised)" = Data_raw,
"Num. desc. all farmers" = numerical_descriptives_all_farmers,
"Cat. desc. single all farmers" = single_categorical_descriptives_all_farmers,
"Cat. desc. multi all farmers" = multiple_categorical_descriptives_all_farmers,
"Num. desc. by gender" = numerical_descriptives_by_gender,
"Cat. desc. single by gender" = single_categorical_descriptives_by_gender,
"Cat. desc. multi by gender" = multiple_categorical_descriptives_by_gender,
"Net promoter score" = NSP)
#write.xlsx (sets, file = (paste0(data_delivery)), overwrite=TRUE)
Data_raw <- read_excel(data_filename)
Data_raw <- Data_raw %>%
select(-contains("--option--")) %>%
rename_all(funs(tolower)) %>%
filter(`repeat no`==1) %>%
select(identifier,
name_of_farmer,
mobile_number_farmer,
contains("pi_")) #-contains("ppi"))
pi_info<- list("Personal information" = Data_raw)
#write.xlsx(pi_info, file = (paste0(pi_filename)), overwrite = TRUE)
