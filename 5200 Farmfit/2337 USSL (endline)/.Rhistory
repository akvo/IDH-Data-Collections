Data$f_othermaincrop_1_income_share <- as.numeric(Data$f_othermaincrop_1_income_share)
Data$f_othermaincrop_2_income_share <- as.numeric(Data$f_othermaincrop_2_income_share)
Data$f_other_crop_income_share <- as.numeric(Data$f_other_crop_income_share)
Data$f_livestock_income_share <- as.numeric(Data$f_livestock_income_share)
Data <- Data %>%
# First approach for actual income
mutate(cal_actual_income = cal_focus_income + cal_other_crop_income + cal_livestock_income - cal_farm_costs_general + cal_offfarm_other_income)
# Second approach for actual income
Data <- Data %>%
mutate(cal_actual_income = cal_focus_income * (1/f_focus_income_share))
# Third approach for actual. income
Data <- Data %>%
mutate(cal_actual_income = (cal_focus_income + cal_other_crop_income +cal_livestock_income) * (1/(f_focus_income_share+f_othermaincrop_1_income_share+f_othermaincrop_2_income_share+ f_other_crop_income_share+ f_livestock_income_share)))
# make a check file to see whether everything went correctly
subset <- Data %>%
select(cal_focus_quant_prod_kg, cal_focus_quant_sold_kg, cal_focus_price, cal_focus_quant_own_consumption_kg, cal_focus_quant_lost_kg, cal_focus_revenue, cal_focus_productivity_acre,cal_labour_costs, cal_inputs_costs, cal_focus_other_costs, cal_focus_cost, cal_focus_income, cal_othermaincrop_cost_1, cal_othermaincrop_cost_2, cal_othermaincrop_production_value, cal_othermaincrop_1_inc_sold, cal_othermaincrop_2_inc_sold,cal_other_crop_income, cal_livestock_income, cal_equipment_costs,cal_farm_costs_loans, cal_farm_costs_general, cal_offfarm_other_income , cal_actual_income, cal_actual_income_v2, cal_actual_income_v3)
hh_farmer_gender <- c("all farmers")
NSP_total <- Data %>%
select(`repeat no`, cs_recommendation) %>%
filter(`repeat no` == 1)%>%
mutate(cs_recommendation = ifelse(is.na(cs_recommendation), "no input",cs_recommendation)) %>%
mutate(detractor = ifelse(cs_recommendation == "not likely"| cs_recommendation == "somewhat likely"| cs_recommendation == "likely",1,0),
promoter = ifelse(cs_recommendation == "very likely", 1,0),
passive = ifelse(cs_recommendation == "most likely"| cs_recommendation == "i dont know",1,0),
nr_recommenders = ifelse(cs_recommendation == "no input", 0,1)) %>%
summarize(nr_promoters = sum(promoter),
nr_detractors = sum(detractor),
nr_passive = sum(passive),
nr_farmers = sum(nr_recommenders)) %>%
mutate(nsp_total = round((nr_promoters/nr_farmers) - (nr_detractors/nr_farmers),2),
hh_farmer_gender = hh_farmer_gender)
NSP_by_gender <- Data %>%
select(`repeat no`, cs_recommendation, hh_farmer_gender) %>%
filter(`repeat no` == 1)%>%
mutate(cs_recommendation = ifelse(is.na(cs_recommendation), "no input",cs_recommendation)) %>%
mutate(detractor = ifelse(cs_recommendation == "not likely"| cs_recommendation == "somewhat likely"| cs_recommendation == "likely",1,0),
promoter = ifelse(cs_recommendation == "very likely", 1,0),
passive = ifelse(cs_recommendation == "most likely"| cs_recommendation == "i dont know",1,0),
nr_recommenders = ifelse(cs_recommendation == "no input", 0,1)) %>%
group_by(hh_farmer_gender) %>%
summarize(nr_promoters = sum(promoter),
nr_detractors = sum(detractor),
nr_passive = sum(passive),
nr_farmers = sum(nr_recommenders)) %>%
mutate(nsp_gender = round((nr_promoters/nr_farmers) - (nr_detractors/nr_farmers),2))
NSP <- full_join(NSP_total, NSP_by_gender)
NSP <- NSP %>% select(hh_farmer_gender, nr_farmers, nr_promoters, nr_detractors,nr_passive, nsp_total, nsp_gender)
Data <- Data %>%
rename(location_cascade_region = pi_location_cascade) %>%  ### the variable on the right differs from case to case!!!
select(
-c(starts_with("pi_"), -contains("county")),
-c(name_of_farmer, mobile_number_farmer)) %>%
rename(pi_location_cascade_first_level = location_cascade_region)
farmer_type <- c("all farmers")
all_var <- Data %>%
filter(`repeat no` == 1) %>%
select(`repeat no`) %>%
table() %>%
melt(c("farmer type"), value.name="n") %>%
mutate(`farmer type` = farmer_type)
numerical_descriptives_all_farmers <- Data %>%
select_if(is.numeric) %>%
summarise_each(funs(round(mean(., na.rm = TRUE),2))) %>%
melt(value.name="mean") %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(round(sd(., na.rm = TRUE),2))) %>%
melt(value.name="sd")) %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(min(., na.rm = TRUE))) %>%
melt(value.name="min")
) %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(round(max(., na.rm = TRUE),2))) %>%
melt(value.name="max")
) %>%
left_join(
Data %>%
select_if(is.numeric) %>%
summarise_each(funs(count_n))  %>%
melt(value.name="freq")
) %>%
left_join(survey_questions) %>%
select("variable", "freq", "mean","sd", "min","max")
single_mc <- survey_questions %>%
filter(type=="option") %>%
filter(is.na(multiple)) %>%
pull(variable)
single_categorical_descriptives_all_farmers <- all_var
for(i in single_mc){
if(any(names(Data) %in% i)){
frequencies <- Data %>%
filter(`repeat no`==1) %>%
select(all_of(i)) %>%
table() %>%
melt(c("category"),value.name = "freq") %>%
mutate(n = nr_participants_raw) %>%
mutate(`farmer type` = farmer_type) %>%
mutate("variable" = i) %>%
left_join(all_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
single_categorical_descriptives_all_farmers <- single_categorical_descriptives_all_farmers %>%
full_join(frequencies) %>%
select(variable, `farmer type`, n, category, freq, "%")
}
}
multiple_mc <- survey_questions %>%
filter(type == "option") %>%
filter(multiple == "yes") %>%
pull(variable)
multiple_categorical_descriptives_all_farmers <- all_var
for (j in multiple_mc) {
print(j)
# Skip the variable "f_labour_otheractivity_labour_type"
if (j == "f_labour_otheractivity_labour_type") {
next
}
if (j == "hh_loan_one_agri_purpose") {
next
}
if (j == "hh_loan_mulitple_largest_purpose") {
next
}
if (any(names(Data) %in% j)) {
frequencies <- Data %>%
select(all_of(j)) %>%
cSplit(j, "|") %>%
gather(key, value) %>%
select(-key) %>%
table() %>%
melt(c("category"), value.name = "freq") %>%
mutate(n = nr_participants_raw) %>%
mutate("variable" = j) %>%
left_join(all_var) %>%
mutate("%" = round(freq / n, 2) * 100) %>%
mutate(category = as.character(category))
multiple_categorical_descriptives_all_farmers <- multiple_categorical_descriptives_all_farmers %>%
full_join(frequencies) %>%
select(variable, `farmer type`, n, category, freq, "%")
}
}
gender_var <- Data %>%
select(hh_farmer_gender) %>%
table() %>%
melt("hh_farmer_gender", value.name="n")
numerical_descriptives_by_gender <- Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(round(mean(., na.rm = TRUE),2))) %>%
melt(value.name="mean") %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(round(sd(., na.rm = TRUE),2))) %>%
melt(value.name="sd")) %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(min(., na.rm = TRUE))) %>%
melt(value.name="min")
) %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(round(max(., na.rm = TRUE),2))) %>%
melt(value.name="max")
) %>%
left_join(
Data %>%
group_by(hh_farmer_gender) %>%
select_if(is.numeric) %>%
summarise_each(funs(count_n))  %>%
melt(value.name="freq")
) %>%
left_join(survey_questions) %>%
left_join(gender_var) %>%
select("variable","hh_farmer_gender","n", "freq", "mean","sd", "min","max")
single_mc <- survey_questions %>%
filter(type=="option") %>%
filter(is.na(multiple)) %>%
filter(variable != "hh_farmer_gender") %>%
pull(variable)
single_categorical_descriptives_by_gender <- gender_var
for(i in single_mc){
if(any(names(Data) %in% i)){
frequencies <- Data %>%
select(hh_farmer_gender, all_of(i)) %>%
table() %>%
melt(c("hh_farmer_gender","category"), value.name="freq") %>%
mutate("variable" = i) %>%
left_join(gender_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
single_categorical_descriptives_by_gender <- single_categorical_descriptives_by_gender %>%
full_join(frequencies) %>%
select(variable, hh_farmer_gender, n, category, freq, "%")
}
}
multiple_mc <- survey_questions %>%
filter(type=="option") %>%
filter(multiple == "yes") %>%
pull(variable)
multiple_categorical_descriptives_by_gender <- gender_var
for(j in multiple_mc){
print(j)
if (j == "f_labour_otheractivity_labour_type") {
next
}
if (j == "hh_loan_mulitple_largest_purpose") {
next
}
if(any(names(Data) %in% j)){
frequencies <- Data %>%
select(hh_farmer_gender, all_of(j)) %>%
cSplit(j, "|") %>%
gather(key, value, -hh_farmer_gender) %>%
select(-key) %>% table() %>%
melt(c("hh_farmer_gender","category"), value.name="freq") %>%
mutate("variable" = j) %>%
left_join(gender_var) %>%
mutate("%" = round(freq/n,2)*100) %>%
mutate(category = as.character(category))
multiple_categorical_descriptives_by_gender <- multiple_categorical_descriptives_by_gender %>%
full_join(frequencies) %>%
select(variable, hh_farmer_gender, n, category, freq, "%")
}
}
question_library <- question_library %>%
dplyr::rename(section = "Title",
question = "Text",
variable = "Variable name",
type = "Question type",
options = "Options",
multiple = "Allow multiple") %>%
mutate_all(tolower) %>%
select(section,
question,
variable,
type,
options,
multiple) %>%
fill(section)
unmatched <- list()
if("identifier" %in% colnames(Data)){
Data <- Data %>%
group_by(identifier) %>%
mutate(id = row_number())
for (nr in c(1:15)){
### ---- delete the unnecessary --- only if household roster questions are asked, check also which ones are used
hh_focuscrop_nr <- paste0("hh_focuscrop_", nr)
Data <- Data %>%
#Delete the rows that do not apply
mutate(
!!sym(hh_focuscrop_nr) := ifelse(id == nr, hh_focuscrop_hrs, NA)) %>%
#Delete the rows that do not apply
fill(!!sym(hh_focuscrop_nr)) %>%
fill(!!sym(hh_focuscrop_nr), .direction = "up") %>%
#Delete the rows that do not apply
mutate(
!!sym(hh_focuscrop_nr) := ifelse(id >1 , NA, !!sym(hh_focuscrop_nr) ))
}
}
Data <- Data %>%
filter(id == 1) %>%
select(-id,
#-hh_member_birthyear,
#-hh_member_gender,
#-hh_member_education,
-hh_focuscrop_hrs)
#Make a dataframe listing all variables
variable <-ls(Data)
data <- data.frame(variable)
## ---- Variables ending with other  ---
#Check if data variable is in codebook
data$compare <-data$variable  %in%  survey_questions$variable
#if it's a "other variable", do not remove
data <- data %>%
mutate(compare = ifelse(grepl('_other$',variable) & compare == FALSE , FALSE, TRUE)) %>%
filter(compare == FALSE)
survey_questions <- bind_rows(survey_questions, data)
survey_questions <- survey_questions %>%
arrange(variable)  %>%
fill(question,
section) %>%
mutate(type = ifelse(!is.na(compare), "free text",type)) %>%
mutate(variable_2 = str_remove(variable,'_other$')) %>%
mutate(same = ifelse(variable_2== lag(variable_2), 1, 0)) %>%
mutate(section = ifelse(!is.na(compare) & same == 0 , "unknown", section),
question = ifelse(!is.na(compare) & same == 0 , "no question available", question)) %>%
select(-compare, -variable_2, -same)
variable <-ls(Data)
data <- data.frame(variable)
data$compare <-data$variable  %in%  survey_questions$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <-data$variable  %in%  vars_transformed$variable
data <-  data %>%
filter(compare == FALSE)    %>%
select(-compare)
#Check if its in the question library
data$compare <-data$variable  %in%  question_library$variable
data <- data %>%
filter(compare == TRUE) %>%
select(-compare)
#If so, add it to the codebook
data <- merge(data, question_library, by.x = "variable")
survey_questions <- bind_rows(survey_questions, data)
#Check if it's not in calculations or question library
variable <-ls(Data)
data <- data.frame(variable)
data$compare <-data$variable  %in%  survey_questions$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <-data$variable  %in%  vars_transformed$variable
data <-  data %>%
filter(compare == FALSE)    %>%
select(-compare)
data$compare <-data$variable  %in%  question_library$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <- data$variable %in% household_demographics$variable
data <- data %>%
filter(compare == TRUE) %>%
select(-compare)
data <- merge(data, household_demographics, by.x = "variable")
survey_questions <- bind_rows(survey_questions, data)
# --- Check household demographic questions ---
hh_demo <- survey_questions %>%
filter(str_detect(variable, 'hh_member_')) %>%
arrange(variable) %>%
fill(section, options)
survey_questions <- survey_questions %>%
filter(!str_detect(variable, 'hh_member_'))
survey_questions <- bind_rows(survey_questions, hh_demo)
# ---- dashboard variables ----
#All variables in delivered data into dataframe
variable <-ls(Data)
data <- data.frame(variable)
#Check if data variable is dashboard list
vars_dashboard$compare <- vars_dashboard$latest_var %in% data$variable
data <- vars_dashboard %>%
filter(!is.na(latest_var)) %>%
filter(compare == FALSE) %>%
filter(is.na(note))
data
variable <-ls(Data)
data <- data.frame(variable)
data$compare <-data$variable  %in%  survey_questions$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
data$compare <-data$variable  %in%  vars_transformed$variable
data <-  data %>%
filter(compare == FALSE)    %>%
select(-compare)
data$compare <-data$variable  %in%  question_library$variable
data <- data %>%
filter(compare == FALSE) %>%
select(-compare)
sets <- list(
"Codebook" = survey_questions,
"Cleaned Data" = Data,
"Raw Data (anonymised)" = Data_raw,
"Num. desc. all farmers" = numerical_descriptives_all_farmers,
"Cat. desc. single all farmers" = single_categorical_descriptives_all_farmers,
"Cat. desc. multi all farmers" = multiple_categorical_descriptives_all_farmers,
"Num. desc. by gender" = numerical_descriptives_by_gender,
"Cat. desc. single by gender" = single_categorical_descriptives_by_gender,
"Cat. desc. multi by gender" = multiple_categorical_descriptives_by_gender,
"Net promoter score" = NSP)
write.xlsx (sets, file = (paste0(data_delivery)))
## ---- Extract personal information ----
Data_raw <- read_excel(data_filename)
Data_raw <- Data_raw %>%
select(-contains("--option--")) %>%
rename_all(funs(tolower)) %>%
filter(`repeat no`==1) %>%
select(identifier,
name_of_farmer,
mobile_number_farmer,
contains("pi_")) #-contains("ppi"))
pi_info<- list("Personal information" = Data_raw)
write.xlsx(pi_info, file="pi_2023_Guinness_sorghum.xlsx")
productivity <- Data %>%
#    mutate(focus_product_min_sold = cal_focus_quant_prod_kg - cal_focus_quant_sold_kg) %>%
select(identifier,
#submitter,
#`submission date`, ##MAKE SURE THIS VARIABLE IS NOT DELETED IN THE FIRST PIECE OF THE CODE.It should be deleted before sharing with IDH, but it should be kept when checking the productivity numbers.
starts_with("pi_location_cascade_level"), #include the applicable variable, this differs per case
f_size,
f_size_acre,
f_focus_crop_size,
f_focus_crop_size_acre,
cal_focus_productivity_acre,
f_focus_quant_prod,
f_focus_measurement_prod,
f_focus_quant_sold,
f_focus_measurement_sold,
focus_product_min_sold,
f_focus_price,
f_focus_income_share,
f_focus_own_consumption_share,
f_focus_lost_share,
f_othermaincrop_1_quant_prod,
f_othermaincrop_1_meas_prod,
f_othermaincrop_1_quant_sold,
f_othermaincrop_1_meas_sold,
f_othermaincrop_1_income_share,
f_othermaincrop_1_inc_sold,
f_othermaincrop_1_price,
f_othermaincrop_1_costs_labour,
f_othermaincrop_1_costs_inputs,
f_othermaincrop_1_costs_transport,
f_othermaincrop_2_quant_prod,
f_othermaincrop_2_meas_prod,
f_othermaincrop_2_quant_sold,
f_othermaincrop_2_meas_sold,
f_othermaincrop_2_inc_sold,
f_othermaincrop_2_price,
f_othermaincrop_2_costs_labour,
f_othermaincrop_2_costs_inputs,
f_othermaincrop_2_costs_transport,
f_other_crop_income,
f_livestock_income_total,
f_livestock_nr_labourers,
f_livestock_nr_hired_labourers,
f_livestock_days_hiredlabour,
f_livestock_wages_hiredlabour,
f_livestock_costs_other,
f_income_offfarmlabour_month,
f_focus_production_costs_season,
f_labour_hired_share,
f_focus_labour_wage_per_day,
f_focus_labour_costs_month,
f_focus_labour_costs_season,
f_focus_labour_costs_year,
f_inputs_costs_seeds_season,
f_inputs_costs_fertilizer_season,
f_inputs_costs_chemicals,
f_coop_fee
)
productivity <- Data %>%
mutate(focus_product_min_sold = cal_focus_quant_prod_kg - cal_focus_quant_sold_kg) %>%
select(identifier,
#submitter,
#`submission date`, ##MAKE SURE THIS VARIABLE IS NOT DELETED IN THE FIRST PIECE OF THE CODE.It should be deleted before sharing with IDH, but it should be kept when checking the productivity numbers.
starts_with("pi_location_cascade_level"), #include the applicable variable, this differs per case
f_size,
f_size_acre,
f_focus_crop_size,
f_focus_crop_size_acre,
cal_focus_productivity_acre,
f_focus_quant_prod,
f_focus_measurement_prod,
f_focus_quant_sold,
f_focus_measurement_sold,
focus_product_min_sold,
f_focus_price,
f_focus_income_share,
f_focus_own_consumption_share,
f_focus_lost_share,
f_othermaincrop_1_quant_prod,
f_othermaincrop_1_meas_prod,
f_othermaincrop_1_quant_sold,
f_othermaincrop_1_meas_sold,
f_othermaincrop_1_income_share,
f_othermaincrop_1_inc_sold,
f_othermaincrop_1_price,
f_othermaincrop_1_costs_labour,
f_othermaincrop_1_costs_inputs,
f_othermaincrop_1_costs_transport,
f_othermaincrop_2_quant_prod,
f_othermaincrop_2_meas_prod,
f_othermaincrop_2_quant_sold,
f_othermaincrop_2_meas_sold,
f_othermaincrop_2_inc_sold,
f_othermaincrop_2_price,
f_othermaincrop_2_costs_labour,
f_othermaincrop_2_costs_inputs,
f_othermaincrop_2_costs_transport,
f_other_crop_income,
f_livestock_income_total,
f_livestock_nr_labourers,
f_livestock_nr_hired_labourers,
f_livestock_days_hiredlabour,
f_livestock_wages_hiredlabour,
f_livestock_costs_other,
f_income_offfarmlabour_month,
f_focus_production_costs_season,
f_labour_hired_share,
f_focus_labour_wage_per_day,
f_focus_labour_costs_month,
f_focus_labour_costs_season,
f_focus_labour_costs_year,
f_inputs_costs_seeds_season,
f_inputs_costs_fertilizer_season,
f_inputs_costs_chemicals,
f_coop_fee
)
write.xlsx (productivity, file = "productivity_check.xlsx", overwrite = TRUE)
